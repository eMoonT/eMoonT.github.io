<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>L&#39;blog</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xingmel.top/"/>
  <updated>2020-02-03T12:33:52.012Z</updated>
  <id>https://xingmel.top/</id>
  
  <author>
    <name>xians</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python笔记</title>
    <link href="https://xingmel.top/python%E7%AC%94%E8%AE%B0.html"/>
    <id>https://xingmel.top/python笔记.html</id>
    <published>2020-02-03T12:32:36.000Z</published>
    <updated>2020-02-03T12:33:52.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python笔记"><a href="#python笔记" class="headerlink" title="python笔记"></a>python笔记</h1><p>库文件安装：</p><blockquote><p> python -m pip install –user pyquery</p></blockquote><p>[TOC]</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">"Alex"</span>,<span class="string">"Tenglan"</span>,<span class="string">"Eric"</span>,<span class="string">"Rain"</span>,<span class="string">"Tom"</span>,<span class="string">"Amy"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">1</span>:<span class="number">4</span>]  <span class="comment">#取下标1至下标4之间的数字，包括1，不包括4</span></span><br><span class="line">[<span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">1</span>:<span class="number">-1</span>] <span class="comment">#取下标1至-1的值，不包括-1</span></span><br><span class="line">[<span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">0</span>:<span class="number">3</span>] </span><br><span class="line">[<span class="string">'Alex'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[:<span class="number">3</span>] <span class="comment">#如果是从头开始取，0可以忽略，跟上句效果一样</span></span><br><span class="line">[<span class="string">'Alex'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">3</span>:] <span class="comment">#如果想取最后一个，必须不能写-1，只能这么写</span></span><br><span class="line">[<span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">3</span>:<span class="number">-1</span>] <span class="comment">#这样-1就不会被包含了</span></span><br><span class="line">[<span class="string">'Rain'</span>, <span class="string">'Tom'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">0</span>::<span class="number">2</span>] <span class="comment">#后面的2是代表，每隔一个元素，就取一个</span></span><br><span class="line">[<span class="string">'Alex'</span>, <span class="string">'Eric'</span>, <span class="string">'Tom'</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[::<span class="number">2</span>] <span class="comment">#和上句效果一样</span></span><br><span class="line">[<span class="string">'Alex'</span>, <span class="string">'Eric'</span>, <span class="string">'Tom'</span>]</span><br></pre></td></tr></table></figure><h5 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Alex'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.append(<span class="string">"我是新来的"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Alex'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br></pre></td></tr></table></figure><h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Alex'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.insert(<span class="number">2</span>,<span class="string">"强行从Eric前面插入"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Alex'</span>, <span class="string">'Tenglan'</span>, <span class="string">'强行从Eric前面插入'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.insert(<span class="number">5</span>,<span class="string">"从eric后面插入试试新姿势"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Alex'</span>, <span class="string">'Tenglan'</span>, <span class="string">'强行从Eric前面插入'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'从eric后面插入试试新姿势'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br></pre></td></tr></table></figure><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Alex'</span>, <span class="string">'Tenglan'</span>, <span class="string">'强行从Eric前面插入'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'从eric后面插入试试新姿势'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">2</span>] = <span class="string">"该换人了"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Alex'</span>, <span class="string">'Tenglan'</span>, <span class="string">'该换人了'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'从eric后面插入试试新姿势'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br></pre></td></tr></table></figure><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; del names[2] </span><br><span class="line">&gt;&gt;&gt; names</span><br><span class="line">[&apos;Alex&apos;, &apos;Tenglan&apos;, &apos;Eric&apos;, &apos;Rain&apos;, &apos;从eric后面插入试试新姿势&apos;, &apos;Tom&apos;, &apos;Amy&apos;, &apos;我是新来的&apos;]</span><br><span class="line">&gt;&gt;&gt; del names[4]</span><br><span class="line">&gt;&gt;&gt; names</span><br><span class="line">[&apos;Alex&apos;, &apos;Tenglan&apos;, &apos;Eric&apos;, &apos;Rain&apos;, &apos;Tom&apos;, &apos;Amy&apos;, &apos;我是新来的&apos;]</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; names.remove(&quot;Eric&quot;) #删除指定元素</span><br><span class="line">&gt;&gt;&gt; names</span><br><span class="line">[&apos;Alex&apos;, &apos;Tenglan&apos;, &apos;Rain&apos;, &apos;Tom&apos;, &apos;Amy&apos;, &apos;我是新来的&apos;]</span><br><span class="line">&gt;&gt;&gt; names.pop() #删除列表最后一个值 </span><br><span class="line">&apos;我是新来的&apos;</span><br><span class="line">&gt;&gt;&gt; names</span><br><span class="line">[&apos;Alex&apos;, &apos;Tenglan&apos;, &apos;Rain&apos;, &apos;Tom&apos;, &apos;Amy&apos;]</span><br><span class="line">&gt;&gt;&gt; names.clear()</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; names</span><br><span class="line">[&apos;Alex&apos;, &apos;Tenglan&apos;, &apos;Rain&apos;, &apos;Tom&apos;, &apos;Amy&apos;]</span><br><span class="line">&gt;&gt;&gt; b = [1,2,3]</span><br><span class="line">&gt;&gt;&gt; names.extend(b)</span><br><span class="line">&gt;&gt;&gt; names</span><br><span class="line">[&apos;Alex&apos;, &apos;Tenglan&apos;, &apos;Rain&apos;, &apos;Tom&apos;, &apos;Amy&apos;, 1, 2, 3]</span><br></pre></td></tr></table></figure><h5 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; names</span><br><span class="line">[&apos;Alex&apos;, &apos;Tenglan&apos;, &apos;Rain&apos;, &apos;Tom&apos;, &apos;Amy&apos;, 1, 2, 3]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; name_copy = names.copy()</span><br><span class="line">&gt;&gt;&gt; name_copy</span><br><span class="line">[&apos;Alex&apos;, &apos;Tenglan&apos;, &apos;Rain&apos;, &apos;Tom&apos;, &apos;Amy&apos;, 1, 2, 3]</span><br></pre></td></tr></table></figure><h5 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; names</span><br><span class="line">[&apos;Alex&apos;, &apos;Tenglan&apos;, &apos;Amy&apos;, &apos;Tom&apos;, &apos;Amy&apos;, 1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; names.count(&quot;Amy&quot;)</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h5 id="排序-amp-翻转"><a href="#排序-amp-翻转" class="headerlink" title="排序&amp;翻转"></a>排序&amp;翻转</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; names</span><br><span class="line">[&apos;Alex&apos;, &apos;Tenglan&apos;, &apos;Amy&apos;, &apos;Tom&apos;, &apos;Amy&apos;, 1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; names.sort() #排序</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: unorderable types: int() &lt; str()   #3.0里不同数据类型不能放在一起排序了，擦</span><br><span class="line">&gt;&gt;&gt; names[-3] = &apos;1&apos;</span><br><span class="line">&gt;&gt;&gt; names[-2] = &apos;2&apos;</span><br><span class="line">&gt;&gt;&gt; names[-1] = &apos;3&apos;</span><br><span class="line">&gt;&gt;&gt; names</span><br><span class="line">[&apos;Alex&apos;, &apos;Amy&apos;, &apos;Amy&apos;, &apos;Tenglan&apos;, &apos;Tom&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;]</span><br><span class="line">&gt;&gt;&gt; names.sort()</span><br><span class="line">&gt;&gt;&gt; names</span><br><span class="line">[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;Alex&apos;, &apos;Amy&apos;, &apos;Amy&apos;, &apos;Tenglan&apos;, &apos;Tom&apos;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; names.reverse() #反转</span><br><span class="line">&gt;&gt;&gt; names</span><br><span class="line">[&apos;Tom&apos;, &apos;Tenglan&apos;, &apos;Amy&apos;, &apos;Amy&apos;, &apos;Alex&apos;, &apos;3&apos;, &apos;2&apos;, &apos;1&apos;]</span><br></pre></td></tr></table></figure><h5 id="获取下表"><a href="#获取下表" class="headerlink" title="获取下表"></a>获取下表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; names</span><br><span class="line">[&apos;Tom&apos;, &apos;Tenglan&apos;, &apos;Amy&apos;, &apos;Amy&apos;, &apos;Alex&apos;, &apos;3&apos;, &apos;2&apos;, &apos;1&apos;]</span><br><span class="line">&gt;&gt;&gt; names.index(&quot;Amy&quot;)</span><br><span class="line">2 #只返回找到的第一个下标</span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">功能：统计当前元组中某元素的个数</span><br><span class="line">    tup = (55,77,85,55,96,99,22,55,)</span><br><span class="line">    tup.count(55)</span><br><span class="line">    返回结果：3 </span><br><span class="line">    备注：元素‘55’在元组tup中出现了3次</span><br></pre></td></tr></table></figure><h5 id="index"><a href="#index" class="headerlink" title="index"></a>index</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">功能：获取元素在元组中的索引值,对于重复的元素,默认获取从左起第一个元素的索引值</span><br><span class="line">    tup = (55,77,85,55,96,99,22,55,)</span><br><span class="line">    tup.index(55)</span><br><span class="line">    返回结果：0</span><br><span class="line">    tup.index(85)</span><br><span class="line">    返回结果：2</span><br><span class="line">    tup.index(55,2,7)</span><br><span class="line">    返回结果：3</span><br></pre></td></tr></table></figure><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><h5 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize"></a>capitalize</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：字符串首字母大写</span><br><span class="line">    name = &apos;swhthaitun&apos;</span><br><span class="line">    name.capitalize()</span><br><span class="line">    返回结果：&apos;Swht&apos;</span><br></pre></td></tr></table></figure><h5 id="casefold"><a href="#casefold" class="headerlink" title="casefold"></a>casefold</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">功能： 字符串首字母小写</span><br><span class="line">name = &apos;HelloWord&apos;</span><br><span class="line">    reault = name.casefold()</span><br><span class="line">    print(reault)</span><br><span class="line">    返回结果：helloword</span><br></pre></td></tr></table></figure><h5 id="center"><a href="#center" class="headerlink" title="center"></a>center</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">功能：字符串宽度填充，使用原有字符串+填充字符构成指定长度的新的字符串</span><br><span class="line">    name = &apos;swhthaitun&apos;</span><br><span class="line">    name.center(15)</span><br><span class="line">    返回结果：&apos;   swhthaitun  &apos; #默认以空格进行填充</span><br><span class="line">    name.center(16,&apos;*&apos;)</span><br><span class="line">    返回结果：&apos;***swhthaitun***&apos;</span><br><span class="line"></span><br><span class="line">    功能：字符串居中，以‘*’分割(20为新产生字符串的总的宽度)</span><br><span class="line">    name = &apos;HelloWord&apos;</span><br><span class="line">    reault = name.center(20,&apos;*&apos;)</span><br><span class="line">    print(reault)</span><br><span class="line">    返回结果：*****HelloWord******</span><br></pre></td></tr></table></figure><h5 id="count-1"><a href="#count-1" class="headerlink" title="count"></a>count</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">功能：统计某个字符在字符串中出现的次数，或在字符串指定区间内完成上述操作</span><br><span class="line">    name = &apos;swhthaitun&apos;</span><br><span class="line">    name.count(&apos;h&apos;)</span><br><span class="line">    返回结果：2</span><br><span class="line">    name.count(&apos;h&apos;,0,3)  #从索引值0-3范围的字符中统计&apos;h&apos;出现的次数</span><br><span class="line">    返回结果：1</span><br><span class="line"></span><br><span class="line">    功能：统计子序列出现的次数</span><br><span class="line">    name = &apos;HelloWord&apos;</span><br><span class="line">    reault = name.count(&apos;W&apos;) #如果换成&apos;w&apos;，返回结果为0，python对大小写敏感</span><br><span class="line">    print(reault)</span><br><span class="line">    返回结果：1</span><br><span class="line"></span><br><span class="line">    name = &apos;HelloWord&apos;</span><br><span class="line">    reault = name.count(&apos;l&apos;,0,3) #统计单个字符出现的次数,可以指定起始范围,另外在python中起始范围讲究顾头不顾尾的原则，即[0,3)</span><br><span class="line">    print(reault)</span><br></pre></td></tr></table></figure><h5 id="encode"><a href="#encode" class="headerlink" title="encode"></a>encode</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">功能：对字符串进行编码操作</span><br><span class="line">    name = &apos;swhthaitun&apos;</span><br><span class="line">    name.encode()</span><br><span class="line">    返回结果：b&apos;swhthaitun&apos;</span><br><span class="line"></span><br><span class="line">    功能：转变字符串的编码</span><br><span class="line">    name = &apos;南非波波&apos;</span><br><span class="line">    reault = name.encode(&apos;gbk&apos;)</span><br><span class="line">    print(reault)</span><br><span class="line">    返回结果：b&apos;\xc4\xcf\xb7\xc7\xb2\xa8\xb2\xa8&apos;</span><br></pre></td></tr></table></figure><h5 id="endswith"><a href="#endswith" class="headerlink" title="endswith"></a>endswith</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">功能：判断字符串是否以某个字符串结尾的，返回值为bool型</span><br><span class="line">    name = &apos;swhthaitun&apos;</span><br><span class="line">    name.endswith(&apos;s&apos;)</span><br><span class="line">    返回结果：False</span><br><span class="line">    name.endswith(&apos;n&apos;)</span><br><span class="line">    返回结果：True</span><br><span class="line">    name.endswith(&apos;tun&apos;)</span><br><span class="line">    返回结果：True</span><br><span class="line"></span><br><span class="line">    name = &apos;Iamalatterboy&apos;</span><br><span class="line">    reault = name.endswith(&apos;y&apos;)</span><br><span class="line">    print(reault)</span><br><span class="line">    返回结果：True</span><br></pre></td></tr></table></figure><h5 id="expandtabs"><a href="#expandtabs" class="headerlink" title="expandtabs"></a>expandtabs</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">功能：将制表符&apos;\t&apos;转换成指定宽度的tab键分割，默认tabsize=8</span><br><span class="line">    li = &apos;sw\tht&apos;</span><br><span class="line">    li.expandtabs(4)</span><br><span class="line">    返回结果：&apos;sw  ht&apos;</span><br><span class="line">    li.expandtabs()</span><br><span class="line">    返回结果：&apos;sw      ht&apos;</span><br></pre></td></tr></table></figure><h5 id="find"><a href="#find" class="headerlink" title="find"></a>find</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">功能：在字符串中查找指定字符串，找不到时返回<span class="number">-1</span></span><br><span class="line">    name = <span class="string">'swht'</span></span><br><span class="line">    name.find(<span class="string">'s'</span>)</span><br><span class="line">    返回结果：<span class="number">0</span></span><br><span class="line">    name.find(<span class="string">'h'</span>)</span><br><span class="line">    返回结果：<span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="format"><a href="#format" class="headerlink" title="format"></a>format</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">功能：格式化输出字符串</span><br><span class="line">    li = <span class="string">'I\'m &#123;&#125;,&#123;&#125;'</span> <span class="comment">#两个'&#123;&#125;'是占位符</span></span><br><span class="line">    li.format(<span class="string">'swht'</span>,<span class="string">'欢迎来中国'</span>)</span><br><span class="line">    返回结果：<span class="string">"I'm swht,欢迎来中国"</span></span><br><span class="line">    参考：http://blog.chinaunix.net/uid<span class="number">-23802873</span>-id<span class="number">-4477364.</span>html</span><br></pre></td></tr></table></figure><h5 id="index-1"><a href="#index-1" class="headerlink" title="index"></a>index</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：在字符串中查找指定的字符串,找不到时直接报错</span><br><span class="line">name = <span class="string">'swhthaitun'</span></span><br><span class="line">name.index(<span class="string">'w'</span>)</span><br><span class="line">返回结果：<span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~~~py</span><br><span class="line">功能：字符串连接</span><br><span class="line"><span class="code">    name = 'swhthaitun'</span></span><br><span class="line"><span class="code">    '*'.join(name)</span></span><br><span class="line"><span class="code">    返回结果：'s*w*h*t*h*a*i*t*u*n'</span></span><br><span class="line">~~~</span><br></pre></td></tr></table></figure><h5 id="isalnum"><a href="#isalnum" class="headerlink" title="isalnum"></a>isalnum</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：检查判断字符串是否包含字母数字字符（http://www.yiibai.com/python/string_isalnum.html）</span><br><span class="line">    name = &apos;swhthaitun&apos;</span><br><span class="line">    name.isalnum()</span><br><span class="line">    返回结果：True</span><br></pre></td></tr></table></figure><h5 id="isalpha"><a href="#isalpha" class="headerlink" title="isalpha"></a>isalpha</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：检测字符串是否只由字母组成（http://www.runoob.com/python/att-string-isalpha.html）</span><br><span class="line">    name = <span class="string">'swhthaitun'</span></span><br><span class="line">    name.isalpha()</span><br><span class="line">    返回结果：<span class="literal">True</span></span><br></pre></td></tr></table></figure><h5 id="isdecimal"><a href="#isdecimal" class="headerlink" title="isdecimal"></a>isdecimal</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：检查字符串是否只包含十进制字符。这种方法只存在于unicode对象。（参考：http://www.runoob.com/python/att-string-isdecimal.html）</span><br><span class="line">    name = <span class="string">'swhthaitun'</span></span><br><span class="line">    name.isdecimal()</span><br><span class="line">    返回结果：<span class="literal">False</span></span><br></pre></td></tr></table></figure><h5 id="isdigit"><a href="#isdigit" class="headerlink" title="isdigit"></a>isdigit</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：检测字符串是否只由数字组成。(参考:http://www.runoob.com/python/att-string-isdigit.html)</span><br><span class="line">    name = <span class="string">'swhthaitun'</span></span><br><span class="line">    name.isdigit()</span><br><span class="line">    返回结果：<span class="literal">False</span></span><br></pre></td></tr></table></figure><h5 id="isdentifier"><a href="#isdentifier" class="headerlink" title="isdentifier"></a>isdentifier</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">功能：检测字符串是否是字母开头</span><br><span class="line">   name = &apos;swhthaitun&apos;</span><br><span class="line">   name.isidentifier()</span><br><span class="line">   返回结果：True</span><br><span class="line">   name = &apos;1swhthaitun&apos;</span><br><span class="line">   name.isidentifier()</span><br><span class="line">   返回结果：False</span><br></pre></td></tr></table></figure><h5 id="isnumeric"><a href="#isnumeric" class="headerlink" title="isnumeric"></a>isnumeric</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">功能：检测字符串是否只由数字组成。这种方法是只针对unicode对象。</span><br><span class="line">    name = <span class="string">'swhthaitun'</span></span><br><span class="line">    name.isnumeric()</span><br><span class="line">    返回结果：<span class="literal">False</span></span><br><span class="line">    Li = <span class="string">'5523'</span></span><br><span class="line">    Li.isnumeric()</span><br><span class="line">    返回结果：<span class="literal">True</span></span><br></pre></td></tr></table></figure><h5 id="isprintable"><a href="#isprintable" class="headerlink" title="isprintable"></a>isprintable</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">功能：判断字符串中所有字符是否都属于可见字符</span><br><span class="line">    a = &quot;\tPuppy&quot;</span><br><span class="line">    a.isprintable()</span><br><span class="line">    返回结果：False</span><br><span class="line">    name = &apos;swhthaitun&apos;</span><br><span class="line">    name.isprintable()</span><br><span class="line">    返回结果：True</span><br></pre></td></tr></table></figure><h5 id="isspace"><a href="#isspace" class="headerlink" title="isspace"></a>isspace</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">功能：检测字符串是否为空格</span><br><span class="line">    name = &apos;swhthaitun&apos;</span><br><span class="line">    name.isspace()</span><br><span class="line">    返回结果：False</span><br><span class="line">    Li = &apos; &apos;</span><br><span class="line">    Li.isspace()</span><br><span class="line">    返回结果：True</span><br></pre></td></tr></table></figure><h5 id="istitle"><a href="#istitle" class="headerlink" title="istitle"></a>istitle</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">功能：判断字符串是否适合当作标题（其实就是每个单词首字母大写）</span><br><span class="line">    a = <span class="string">"a puppy"</span></span><br><span class="line">    b = <span class="string">"Puppy"</span></span><br><span class="line">    a.istitle()</span><br><span class="line">    返回结果：<span class="literal">False</span></span><br><span class="line">    b.istitle()</span><br><span class="line">    返回结果：<span class="literal">True</span></span><br></pre></td></tr></table></figure><h5 id="isupper"><a href="#isupper" class="headerlink" title="isupper"></a>isupper</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">功能：判断字符串中所有字母字符是否都是大写字母</span><br><span class="line">    a = <span class="string">"puppy"</span></span><br><span class="line">    b = <span class="string">"PUPPY"</span></span><br><span class="line">    a.isupper()</span><br><span class="line">    返回结果：<span class="literal">False</span></span><br><span class="line">    b.isupper()</span><br><span class="line">    返回结果：<span class="literal">True</span></span><br></pre></td></tr></table></figure><h5 id="ljust"><a href="#ljust" class="headerlink" title="ljust"></a>ljust</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">功能：返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。（参考：http://www.runoob.com/python/att-string-ljust.html）</span><br><span class="line">    语法：str.ljust(width[, fillchar])</span><br><span class="line">         width -- 指定字符串长度。</span><br><span class="line">         fillchar -- 填充字符，默认为空格。</span><br><span class="line">    name = <span class="string">'swhthaitun'</span></span><br><span class="line">    name.ljust(<span class="number">50</span>,<span class="string">'*'</span>)</span><br><span class="line">    返回结果：<span class="string">'swhthaitun****************************************'</span></span><br></pre></td></tr></table></figure><h5 id="lower"><a href="#lower" class="headerlink" title="lower"></a>lower</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：将所有的字母转换成小写字母</span><br><span class="line">   name = <span class="string">'SWHT'</span></span><br><span class="line">   name.lower()</span><br><span class="line">   返回结果：<span class="string">'swht'</span></span><br></pre></td></tr></table></figure><h5 id="strip"><a href="#strip" class="headerlink" title="strip"></a>strip</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：去除字符串两边的空格</span><br><span class="line">    name = <span class="string">'  swht   '</span></span><br><span class="line">    name.rstrip()</span><br><span class="line">    返回结果：<span class="string">'swht'</span></span><br></pre></td></tr></table></figure><h5 id="maketrans"><a href="#maketrans" class="headerlink" title="maketrans"></a>maketrans</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">功能：用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</span><br><span class="line">    注：两个字符串的长度必须相同，为一一对应的关系。</span><br><span class="line">    语法：str.maketrans(intab, outtab)</span><br><span class="line">    参数：intab -- 字符串中要替代的字符组成的字符串。</span><br><span class="line">          outtab -- 相应的映射字符的字符串。</span><br><span class="line">    intab = <span class="string">"swhtr"</span></span><br><span class="line">    outtab = <span class="string">"12345"</span></span><br><span class="line">    name = <span class="string">"hjjksknsnjmk"</span></span><br><span class="line">    name.maketrans(intab, outtab)</span><br><span class="line">    返回结果：&#123;<span class="number">104</span>: <span class="number">51</span>, <span class="number">114</span>: <span class="number">53</span>, <span class="number">115</span>: <span class="number">49</span>, <span class="number">116</span>: <span class="number">52</span>, <span class="number">119</span>: <span class="number">50</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">功能：根据指定的分隔符将字符串进行分割。</span><br><span class="line">        如果字符串包含指定的分隔符，则返回一个<span class="number">3</span>元的元组，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串。</span><br><span class="line">    name = <span class="string">'swht'</span></span><br><span class="line">    li = <span class="string">'hhsslswhtolljm'</span></span><br><span class="line">    li.partition(name)</span><br><span class="line">    返回结果：(<span class="string">'hhssl'</span>, <span class="string">'swht'</span>, <span class="string">'olljm'</span>)</span><br></pre></td></tr></table></figure><h5 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">功能：把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。</span><br><span class="line">    语法：str.replace(old, new[, max])</span><br><span class="line">    参数：old -- 将被替换的子字符串。</span><br><span class="line">         new -- 新字符串，用于替换old子字符串。</span><br><span class="line">         max -- 可选字符串, 替换不超过 max 次</span><br><span class="line">    str = <span class="string">"this is string example....wow!!! this is really string"</span></span><br><span class="line">    str.replace(<span class="string">"is"</span>, <span class="string">"was"</span>)</span><br><span class="line">    返回结果：<span class="string">'thwas was string example....wow!!! thwas was really string'</span></span><br><span class="line">    str.replace(<span class="string">"is"</span>, <span class="string">"was"</span>, <span class="number">3</span>)</span><br><span class="line">    返回结果：<span class="string">'thwas was string example....wow!!! thwas is really string'</span></span><br></pre></td></tr></table></figure><h5 id="split"><a href="#split" class="headerlink" title="split"></a>split</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">功能：字符串分割，默认是空格</span><br><span class="line">    name.split()</span><br><span class="line">    返回结果：[<span class="string">'swht'</span>]</span><br><span class="line">    name.split(<span class="string">'s'</span>) <span class="comment">#以's'字符进行分割</span></span><br><span class="line">    返回结果：[<span class="string">''</span>, <span class="string">'wht'</span>]</span><br></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><h5 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">功能：清空字典</span><br><span class="line">    dict_li = &#123;<span class="string">'users'</span>:<span class="string">'swht'</span>,<span class="string">'age'</span>:<span class="string">'18'</span>,&#125;</span><br><span class="line">    dict_li.clear()</span><br><span class="line">    返回结果：dict_li</span><br><span class="line">            &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">功能：浅拷贝</span><br><span class="line">    dict_li = &#123;<span class="string">'users'</span>:<span class="string">'swht'</span>,<span class="string">'age'</span>:<span class="string">'18'</span>,&#125;</span><br><span class="line">    dict_li.copy()</span><br><span class="line">    返回结果：&#123;<span class="string">'age'</span>: <span class="string">'18'</span>, <span class="string">'users'</span>: <span class="string">'swht'</span>&#125;</span><br><span class="line">    dict_li = &#123;<span class="string">'users'</span>:<span class="string">'swht'</span>,<span class="string">'age'</span>:<span class="string">'18'</span>,<span class="string">'address'</span>:&#123;<span class="string">'sd'</span>:<span class="string">'dz'</span>&#125;&#125;</span><br><span class="line">    dict_li.copy()</span><br><span class="line">    返回结果：&#123;<span class="string">'age'</span>: <span class="string">'18'</span>, <span class="string">'users'</span>: <span class="string">'swht'</span>, <span class="string">'address'</span>: &#123;<span class="string">'sd'</span>: <span class="string">'dz'</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="fromkeys"><a href="#fromkeys" class="headerlink" title="fromkeys"></a>fromkeys</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">功能：用于创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值。</span><br><span class="line">    语法：dict.fromkeys(seq[, value]))</span><br><span class="line">    参数：seq -- 字典键值列表。</span><br><span class="line">         value -- 可选参数, 设置键序列（seq）的值。</span><br><span class="line">    li = [<span class="string">'users'</span>,<span class="string">'age'</span>]</span><br><span class="line">    dict_li = dict.fromkeys(li,<span class="string">'swht'</span>)</span><br><span class="line">    返回结果：dict_li</span><br><span class="line">            &#123;<span class="string">'age'</span>: <span class="string">'swht'</span>, <span class="string">'users'</span>: <span class="string">'swht'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="get"><a href="#get" class="headerlink" title="get"></a>get</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：获取字典的value值</span><br><span class="line">    dict_li = &#123;<span class="string">'users'</span>:<span class="string">'swht'</span>,<span class="string">'age'</span>:<span class="string">'18'</span>,&#125;</span><br><span class="line">    dict_li.get(<span class="string">'users'</span>)</span><br><span class="line">    返回结果：<span class="string">'swht'</span></span><br></pre></td></tr></table></figure><h5 id="items"><a href="#items" class="headerlink" title="items"></a>items</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：返回可遍历的(键, 值) 元组数组</span><br><span class="line">    dict_li = &#123;<span class="string">'users'</span>:<span class="string">'swht'</span>,<span class="string">'age'</span>:<span class="string">'18'</span>,&#125;</span><br><span class="line">    dict_li.items()</span><br><span class="line">    返回结果：dict_items([(<span class="string">'age'</span>, <span class="string">'18'</span>), (<span class="string">'users'</span>, <span class="string">'swht'</span>)])</span><br></pre></td></tr></table></figure><h5 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：获取字典可遍历的键</span><br><span class="line">    dict_li = &#123;<span class="string">'users'</span>:<span class="string">'swht'</span>,<span class="string">'age'</span>:<span class="string">'18'</span>,&#125;</span><br><span class="line">    dict_li.keys()</span><br><span class="line">    返回结果：dict_keys([<span class="string">'age'</span>, <span class="string">'users'</span>])</span><br></pre></td></tr></table></figure><h5 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：删除字典中指定的键值</span><br><span class="line">    dict_li = &#123;<span class="string">'users'</span>:<span class="string">'swht'</span>,<span class="string">'age'</span>:<span class="string">'18'</span>,&#125;</span><br><span class="line">    dict_li.pop(<span class="string">'age'</span>)</span><br><span class="line">    返回结果：<span class="string">'18'</span></span><br></pre></td></tr></table></figure><h5 id="popiteam"><a href="#popiteam" class="headerlink" title="popiteam"></a>popiteam</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">功能：随机返回并删除字典中的一对键和值</span><br><span class="line">    dict_li = &#123;<span class="string">'users'</span>:<span class="string">'swht'</span>,<span class="string">'age'</span>:<span class="string">'18'</span>,&#125;</span><br><span class="line">    dict_li.popitem()</span><br><span class="line">    返回结果：(<span class="string">'age'</span>, <span class="string">'18'</span>)</span><br><span class="line">    dict_li</span><br><span class="line">    &#123;<span class="string">'users'</span>: <span class="string">'swht'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="setdefault"><a href="#setdefault" class="headerlink" title="setdefault"></a>setdefault</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">功能：查找键值，如果键不已经存在于字典中，将会添加键并将值设为默认值。</span><br><span class="line">    dict_li = &#123;<span class="string">'users'</span>:<span class="string">'swht'</span>,<span class="string">'age'</span>:<span class="string">'18'</span>,&#125;</span><br><span class="line">    dict_li.setdefault(<span class="string">'ID'</span>,<span class="number">5</span>)</span><br><span class="line">    返回结果：<span class="number">5</span></span><br><span class="line">    dict_li</span><br><span class="line">    返回结果：&#123;<span class="string">'age'</span>: <span class="string">'18'</span>, <span class="string">'users'</span>: <span class="string">'swht'</span>, <span class="string">'ID'</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="update"><a href="#update" class="headerlink" title="update"></a>update</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">功能：把指定字典的键值更新到当前字典中</span><br><span class="line">    dict_li = &#123;<span class="string">'users'</span>:<span class="string">'swht'</span>,<span class="string">'age'</span>:<span class="string">'18'</span>,&#125;</span><br><span class="line">    dict_ai = &#123;<span class="string">'address'</span>:<span class="string">'山东'</span>&#125;</span><br><span class="line">    dict_li.update(dict_ai)</span><br><span class="line">    dict_li</span><br><span class="line">    返回结果：&#123;<span class="string">'age'</span>: <span class="string">'18'</span>, <span class="string">'users'</span>: <span class="string">'swht'</span>, <span class="string">'address'</span>: <span class="string">'山东'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="values"><a href="#values" class="headerlink" title="values"></a>values</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：获取字典的所有值</span><br><span class="line">    dict_li = &#123;<span class="string">'age'</span>: <span class="string">'18'</span>, <span class="string">'users'</span>: <span class="string">'swht'</span>, <span class="string">'address'</span>: <span class="string">'山东'</span>&#125;</span><br><span class="line">    dict_li.values()</span><br><span class="line">    返回结果：dict_values([<span class="string">'18'</span>, <span class="string">'swht'</span>, <span class="string">'山东'</span>])</span><br></pre></td></tr></table></figure><h3 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h3><h5 id="set创建空集合"><a href="#set创建空集合" class="headerlink" title="set创建空集合"></a>set创建空集合</h5><p>  name = set()</p><h5 id="add"><a href="#add" class="headerlink" title="add"></a>add</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">功能：增加集合元素</span><br><span class="line">    name = &#123;<span class="string">'d'</span>, <span class="string">'s'</span>&#125;</span><br><span class="line">    name.add(<span class="string">'d'</span>)</span><br><span class="line">    name</span><br><span class="line">    返回结果：&#123;<span class="string">'d'</span>, <span class="string">'s'</span>&#125;</span><br><span class="line">    name.add(<span class="string">'sd'</span>)</span><br><span class="line">    name</span><br><span class="line">    返回结果：&#123;<span class="string">'sd'</span>, <span class="string">'d'</span>, <span class="string">'s'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="clear-1"><a href="#clear-1" class="headerlink" title="clear"></a>clear</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">功能：清空集合元素</span><br><span class="line">    name = &#123;<span class="string">'d'</span>, <span class="string">'s'</span>&#125;</span><br><span class="line">    name.clear()</span><br><span class="line">    name</span><br><span class="line">    返回结果：&#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="copy-1"><a href="#copy-1" class="headerlink" title="copy"></a>copy</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">功能：浅拷贝</span><br><span class="line">    name = &#123;<span class="string">'sd'</span>, <span class="string">'d'</span>, <span class="string">'s'</span>&#125;</span><br><span class="line">    li = name.copy()</span><br><span class="line">    返回结果：li</span><br><span class="line">            &#123;<span class="string">'sd'</span>, <span class="string">'d'</span>, <span class="string">'s'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="difference"><a href="#difference" class="headerlink" title="difference"></a>difference</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name.difference(li)</span><br><span class="line">    set()</span><br><span class="line">    &gt;&gt;&gt; name.difference()</span><br><span class="line">    &#123;<span class="string">'sd'</span>, <span class="string">'d'</span>, <span class="string">'s'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="discard"><a href="#discard" class="headerlink" title="discard"></a>discard</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">功能：移除元素</span><br><span class="line">    name = &#123;<span class="string">'sd'</span>, <span class="string">'d'</span>, <span class="string">'s'</span>&#125;</span><br><span class="line">    name.discard(<span class="string">'s'</span>)</span><br><span class="line">    返回结果：name </span><br><span class="line">            &#123;<span class="string">'sd'</span>, <span class="string">'d'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="intersection"><a href="#intersection" class="headerlink" title="intersection"></a>intersection</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">功能：取交集,建立新的set集合</span><br><span class="line">    li = (<span class="string">'s'</span>, <span class="string">'d'</span>)</span><br><span class="line">    name = &#123;<span class="string">'sd'</span>, <span class="string">'d'</span>, <span class="string">'s'</span>&#125;</span><br><span class="line">    name.intersection(li)</span><br><span class="line">    返回结果：&#123;<span class="string">'d'</span>, <span class="string">'s'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="isdisjoint"><a href="#isdisjoint" class="headerlink" title="isdisjoint"></a>isdisjoint</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：判断没有交集，返回<span class="literal">True</span>,否则,返回<span class="literal">False</span></span><br><span class="line">    li = &#123;<span class="string">'s'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line">    name = &#123;<span class="string">'sd'</span>, <span class="string">'d'</span>, <span class="string">'s'</span>&#125;</span><br><span class="line">    name.isdisjoint(li)</span><br></pre></td></tr></table></figure><h5 id="issbuset"><a href="#issbuset" class="headerlink" title="issbuset"></a>issbuset</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">功能：判断是否是子集</span><br><span class="line">    li = &#123;<span class="string">'s'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line">    name = &#123;<span class="string">'sd'</span>, <span class="string">'d'</span>, <span class="string">'s'</span>&#125;</span><br><span class="line">    name.issubset(li)  <span class="comment">#判断name是不是li的子集</span></span><br><span class="line">    返回结果：<span class="literal">False</span></span><br><span class="line">    li.issubset(name)  <span class="comment">#判断li是不是name的子集</span></span><br><span class="line">    返回结果：<span class="literal">True</span></span><br></pre></td></tr></table></figure><h5 id="issuperset"><a href="#issuperset" class="headerlink" title="issuperset"></a>issuperset</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">功能：判断是否是父集</span><br><span class="line">    li = &#123;<span class="string">'s'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line">    name = &#123;<span class="string">'sd'</span>, <span class="string">'d'</span>, <span class="string">'s'</span>&#125;</span><br><span class="line">    name.issuperset(li)  <span class="comment">#判断name是不是li的父集</span></span><br><span class="line">    返回结果：<span class="literal">True</span></span><br><span class="line">    li.issuperset(name)  <span class="comment">#判断li是不是name的父集</span></span><br><span class="line">    返回结果：<span class="literal">False</span></span><br></pre></td></tr></table></figure><h5 id="pop-1"><a href="#pop-1" class="headerlink" title="pop"></a>pop</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">功能：移除集合元素</span><br><span class="line">    name = &#123;<span class="string">'sd'</span>, <span class="string">'d'</span>, <span class="string">'s'</span>&#125;</span><br><span class="line">    name.pop()</span><br><span class="line">    返回结果：<span class="string">'sd'</span> <span class="comment">#同一个集合，删除集合元素的顺序固定</span></span><br><span class="line">    se1 = &#123;<span class="string">'a'</span>,<span class="string">'s'</span>,<span class="string">'sb'</span>&#125;</span><br><span class="line">    se1.pop()</span><br><span class="line">    返回结果：<span class="string">'sb'</span></span><br></pre></td></tr></table></figure><h5 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h5>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">功能：移除指定集合元素</span><br><span class="line">    name = &#123;<span class="string">'sd'</span>,<span class="string">'d'</span>,<span class="string">'s'</span>&#125;</span><br><span class="line">    name.remove(<span class="string">'s'</span>)</span><br><span class="line">    返回结果：name</span><br><span class="line">    &#123;<span class="string">'sd'</span>, <span class="string">'d'</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><p>实例 代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">10</span>])      <span class="comment">#创建一个数值集合  </span></span><br><span class="line">  </span><br><span class="line">t = set(<span class="string">"Hello"</span>)         <span class="comment">#创建一个唯一字符的集合  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = t | s          <span class="comment"># t 和 s的并集  </span></span><br><span class="line">  </span><br><span class="line">b = t &amp; s          <span class="comment"># t 和 s的交集  </span></span><br><span class="line">  </span><br><span class="line">c = t – s          <span class="comment"># 求差集（项在t中，但不在s中）  </span></span><br><span class="line">  </span><br><span class="line">d = t ^ s          <span class="comment"># 对称差集（项在t或s中，但不会同时出现在二者中）</span></span><br><span class="line">len(s)  </span><br><span class="line">set 的长度  </span><br><span class="line">  </span><br><span class="line">x <span class="keyword">in</span> s  </span><br><span class="line">测试 x 是否是 s 的成员  </span><br><span class="line">  </span><br><span class="line">x <span class="keyword">not</span> <span class="keyword">in</span> s  </span><br><span class="line">测试 x 是否不是 s 的成员  </span><br><span class="line">  </span><br><span class="line">s.issubset(t)  </span><br><span class="line">s &lt;= t  </span><br><span class="line">测试是否 s 中的每一个元素都在 t 中  </span><br><span class="line">  </span><br><span class="line">s.issuperset(t)  </span><br><span class="line">s &gt;= t  </span><br><span class="line">测试是否 t 中的每一个元素都在 s 中  </span><br><span class="line">  </span><br><span class="line">s.union(t)  </span><br><span class="line">s | t  </span><br><span class="line">返回一个新的 set 包含 s 和 t 中的每一个元素  </span><br><span class="line">  </span><br><span class="line">s.intersection(t)  </span><br><span class="line">s &amp; t  </span><br><span class="line">返回一个新的 set 包含 s 和 t 中的公共元素  </span><br><span class="line">  </span><br><span class="line">s.difference(t)  </span><br><span class="line">s - t  </span><br><span class="line">返回一个新的 set 包含 s 中有但是 t 中没有的元素  </span><br><span class="line">  </span><br><span class="line">s.symmetric_difference(t)  </span><br><span class="line">s ^ t  </span><br><span class="line">返回一个新的 set 包含 s 和 t 中不重复的元素  </span><br><span class="line">  </span><br><span class="line">s.copy()  </span><br><span class="line">返回 set “s”的一个浅复制</span><br></pre></td></tr></table></figure></li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul><li><p>文件读取</p><ul><li><p>文件读取全部</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FileRead = open(<span class="string">"test.txt"</span>,<span class="string">'r'</span>)</span><br><span class="line">FileRead.read()  <span class="comment">#读取文件所有内容,print(FileRead.read()函数输出文件内容</span></span><br><span class="line">FileRead.close()</span><br></pre></td></tr></table></figure></li><li><p>文件循环读取行</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> FileRead = open(<span class="string">"test.txt"</span>,<span class="string">'r'</span>)</span><br><span class="line"><span class="number">2</span> <span class="keyword">for</span> lines <span class="keyword">in</span> FileRead.readlines():</span><br><span class="line"><span class="number">3</span>     print(<span class="string">"lines:"</span>,lines.strip(<span class="string">'\n'</span>))</span><br><span class="line"><span class="number">4</span> FileRead.close()</span><br><span class="line"><span class="number">5</span> </span><br><span class="line"><span class="number">6</span> <span class="comment">#输出结果</span></span><br><span class="line"><span class="number">7</span> lines: Hello World</span><br><span class="line"><span class="number">8</span> lines: Welcome To Beijing</span><br></pre></td></tr></table></figure></li><li><p>获取python在文件的当中的位置</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> FileRead = open(<span class="string">"test.txt"</span>,<span class="string">'r'</span>)</span><br><span class="line"><span class="number">2</span> print(FileRead.readline().strip(<span class="string">'\n'</span>)) <span class="comment">#读取第一行数据</span></span><br><span class="line"><span class="number">3</span> print(FileRead.tell()) <span class="comment">#获取python所在文件中的当前位置</span></span><br><span class="line"><span class="number">4</span> print(FileRead.readline().strip(<span class="string">'\n'</span>)) <span class="comment">#读取第二行数据</span></span><br><span class="line"><span class="number">5</span> FileRead.close()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>写入数据到文件</p><ul><li><p>文件写入操作</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> FileRead = open(<span class="string">"test.txt"</span>,<span class="string">'w'</span>) <span class="comment">#‘w’--是指文件将被写入数据,已有的数据将会被清空</span></span><br><span class="line"><span class="number">2</span> FileRead.write(<span class="string">'Hello Everybody!\nWelcome To China!'</span>) <span class="comment">#被写入文件的数据,使用‘\n’可以实现换行操作</span></span><br><span class="line"><span class="number">3</span> FileRead.close() <span class="comment">#关闭文件句柄,每次读写文件都应该在最后面将文件关闭</span></span><br></pre></td></tr></table></figure></li><li><p>文件追加写入操作</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> FileRead = open(<span class="string">"test.txt"</span>,<span class="string">'a'</span>) <span class="comment">#‘a’--是指文件将被写入数据,已有的数据不会被清空,在已有数据后面追加下面要添加的数据</span></span><br><span class="line"><span class="number">2</span> FileRead.write(<span class="string">'Hello Everybody!\nWelcome To China!'</span>) <span class="comment">#被写入文件的数据,使用‘\n’可以实现换行操作</span></span><br><span class="line"><span class="number">3</span> FileRead.close() <span class="comment">#关闭文件句柄,每次读写文件都应该在最后面将文件关闭</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>从现有文件中获取数据</p><ul><li><p>获取文件的相关信息</p><p>使用Python中的模块，可以从现有文件中获取信息。使用“os”模块和“stat”模块可以获取文件的基本信息：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="comment">#!/usr/local/env python3</span></span><br><span class="line"> <span class="number">2</span> <span class="string">'''</span></span><br><span class="line"><span class="string"> 3 Author:@南非波波</span></span><br><span class="line"><span class="string"> 4 Blog:http://www.cnblogs.com/songqingbo/</span></span><br><span class="line"><span class="string"> 5 E-mail:qingbo.song@gmail.com</span></span><br><span class="line"><span class="string"> 6 '''</span></span><br><span class="line"> <span class="number">7</span> <span class="keyword">import</span> os</span><br><span class="line"> <span class="number">8</span> <span class="keyword">import</span> stat</span><br><span class="line"> <span class="number">9</span> <span class="keyword">import</span> time</span><br><span class="line"><span class="number">10</span> FileStats = os.stat(<span class="string">'test.txt'</span>) <span class="comment">#获取文件的基本信息</span></span><br><span class="line"><span class="number">11</span> FileInfo = &#123;</span><br><span class="line"><span class="number">12</span>     <span class="string">'Size'</span> : FileStats [ stat.ST_SIZE ], <span class="comment">#文件大小</span></span><br><span class="line"><span class="number">13</span>     <span class="string">'LastModified'</span> : time.ctime(FileStats[ stat.ST_MTIME]),</span><br><span class="line"><span class="number">14</span>     <span class="string">'LastAccessed'</span> : time.ctime(FileStats[stat.ST_ATIME]),</span><br><span class="line"><span class="number">15</span>     <span class="string">'CreationTime'</span> : time.ctime(FileStats[stat.ST_CTIME]),</span><br><span class="line"><span class="number">16</span>     <span class="string">'Mode'</span> : FileStats [ stat.ST_MODE ]</span><br><span class="line"><span class="number">17</span> &#125;</span><br><span class="line"><span class="number">18</span> print(FileStats) <span class="comment">#os.stat_result(st_mode=33206, st_ino=6473924464448069, st_dev=434835, st_nlink=1, st_uid=0, st_gid=0, st_size=70, st_atime=1451980042, st_mtime=1451981189, st_ctime=1451979747)</span></span><br><span class="line"><span class="number">19</span> print(FileInfo) <span class="comment">#&#123;'Size': 70, 'Mode': 33206, 'LastAccessed': 'Tue Jan  5 15:47:22 2016', 'LastModified': 'Tue Jan  5 16:06:29 2016', 'CreationTime': 'Tue Jan  5 15:42:27 2016'&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>使用os.path()判断文件类型</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">import</span> os.path</span><br><span class="line"> <span class="number">2</span>  </span><br><span class="line"> <span class="number">3</span> FileStats = <span class="string">'test.txt'</span></span><br><span class="line"> <span class="number">4</span> <span class="keyword">if</span> os.path.isdir(FileStats):  <span class="comment">#判断文件是否是目录</span></span><br><span class="line"> <span class="number">5</span>     print(<span class="string">'Directory.'</span>)</span><br><span class="line"> <span class="number">6</span> <span class="keyword">elif</span> os.path.isfile(FileStats): <span class="comment">#判断文件是否是文件</span></span><br><span class="line"> <span class="number">7</span>     print(<span class="string">'File.'</span>)</span><br><span class="line"> <span class="number">8</span> <span class="keyword">elif</span> os.path.islink(FileStats): <span class="comment">#判断文件是否是快捷方式(链接)文件</span></span><br><span class="line"> <span class="number">9</span>     print(<span class="string">'Shortcut.'</span>)</span><br><span class="line"><span class="number">10</span> <span class="keyword">elif</span> os.path.ismount(FileStats): <span class="comment">#判断文件是否是挂载文件</span></span><br><span class="line"><span class="number">11</span>     print(<span class="string">'Mount point.'</span>)</span><br></pre></td></tr></table></figure></li><li><p>获取文件中的行数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Countnum</span><span class="params">(filename)</span>:</span></span><br><span class="line">    files = open(filename)</span><br><span class="line">    data = files.read()</span><br><span class="line">    files.flush()</span><br><span class="line">    files.close()</span><br><span class="line">    <span class="keyword">return</span> data.count(<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>python对目录的操作</p><ul><li><p>创建目录</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.mkdir(<span class="string">'testDir'</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建多级目录</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.makedirs(<span class="string">'testDir/test2/test3/test4'</span>)  <span class="comment">#os.makedirs()</span></span><br></pre></td></tr></table></figure></li><li><p>删除多级目录</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.removedirs(<span class="string">'testDir/test2/test3/test4'</span>)</span><br></pre></td></tr></table></figure></li><li><p>删除目录</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rmdir(<span class="string">'testDir'</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>python对特定类型的文件进行操作</p><ul><li><p>使用fnmatch模块显示’.txt’和’.exe’文件名</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">import</span> fnmatch</span><br><span class="line"><span class="number">2</span> <span class="keyword">import</span> os</span><br><span class="line"><span class="number">3</span> <span class="keyword">for</span> FileName <span class="keyword">in</span> os.listdir(<span class="string">'/'</span>):</span><br><span class="line"><span class="number">4</span>     <span class="keyword">if</span> fnmatch.fnmatch(FileName,<span class="string">'*.txt'</span>):</span><br><span class="line"><span class="number">5</span>         print(open(FileName).read())</span><br><span class="line"><span class="number">6</span>     <span class="keyword">elif</span> fnmatch.fnmatch(FileName,<span class="string">'*.exe'</span>):</span><br><span class="line"><span class="number">7</span>         print(FileName)</span><br></pre></td></tr></table></figure></li><li><p>“fnmatch”模块支持正则表达式：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fnmatch</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">FilePattern = fnmatch.translate(<span class="string">'*.txt'</span>)</span><br><span class="line"><span class="keyword">for</span> FileName <span class="keyword">in</span> os.listdir(<span class="string">'./'</span>):</span><br><span class="line">    <span class="keyword">if</span> re.match(FilePattern,FileName):</span><br><span class="line">        print(<span class="string">'Text file.'</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用glob模块查找一种类型的文件比较方便</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">for</span> FileName <span class="keyword">in</span> glob.glob(<span class="string">'*.txt'</span>):</span><br><span class="line">    print(FileName)</span><br><span class="line">    print(<span class="string">'Text file.'</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用数字匹配文件名</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">for</span> FileName <span class="keyword">in</span> glob.glob ( <span class="string">'[0-9].txt'</span> ):</span><br><span class="line">    print(Filename)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数据编组</p><ul><li><p>编组一个包含数字和字符的列表：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/env python3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Author:@南非波波</span></span><br><span class="line"><span class="string">Blog:http://www.cnblogs.com/songqingbo/</span></span><br><span class="line"><span class="string">E-mail:qingbo.song@gmail.com</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">FileHandle = open( <span class="string">'PickleFile.txt'</span>,<span class="string">'wb'</span>)</span><br><span class="line">TestList = [<span class="string">'This'</span>,<span class="number">2</span>,<span class="string">'is'</span>,<span class="number">1</span>,<span class="string">'a'</span>,<span class="number">0</span>,<span class="string">'test.'</span>]</span><br><span class="line">pickle.dump(TestList,FileHandle )</span><br><span class="line">FileHandle.close()</span><br></pre></td></tr></table></figure></li><li><p>拆分编组：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/env python3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Author:@南非波波</span></span><br><span class="line"><span class="string">Blog:http://www.cnblogs.com/songqingbo/</span></span><br><span class="line"><span class="string">E-mail:qingbo.song@gmail.com</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">FileHandle = open(<span class="string">'PickleFile.txt'</span>,<span class="string">'rb'</span>)  <span class="comment">#注意要加'b'进行二进制读写操作,否则报错</span></span><br><span class="line">TestList = pickle.load(FileHandle)</span><br><span class="line">print(TestList)</span><br><span class="line">FileHandle.close()</span><br></pre></td></tr></table></figure></li><li><p>复杂编组：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">FileHandle = open(<span class="string">'PickleFile.txt'</span>,<span class="string">'wb'</span>)</span><br><span class="line">TestList = [ <span class="number">123</span>, &#123; <span class="string">'Calories'</span> : <span class="number">190</span> &#125;, <span class="string">'swht'</span>, [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span> ] ]</span><br><span class="line">pickle.dump(TestList,FileHandle)</span><br><span class="line">FileHandle.close()</span><br></pre></td></tr></table></figure></li><li><p>拆组：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">FileHandle = open(<span class="string">'PickleFile.txt'</span>,<span class="string">'rb'</span>)</span><br><span class="line">TestList = pickle.load(FileHandle)</span><br><span class="line">print(TestList)</span><br><span class="line">FileHandle.close()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建虚拟文件</p><ul><li><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/env python2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Author:@南非波波</span></span><br><span class="line"><span class="string">Blog:http://www.cnblogs.com/songqingbo/</span></span><br><span class="line"><span class="string">E-mail:qingbo.song@gmail.com</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> StringIO</span><br><span class="line"></span><br><span class="line">FileHandle = StringIO.StringIO(<span class="string">"Let freedom ring"</span>) <span class="comment">#创建的文件存在内存中</span></span><br><span class="line">print(FileHandle.read()) <span class="comment"># "Let freedom ring."</span></span><br><span class="line">FileHandle.close()</span><br></pre></td></tr></table></figure></li><li><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/env python2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Author:@南非波波</span></span><br><span class="line"><span class="string">Blog:http://www.cnblogs.com/songqingbo/</span></span><br><span class="line"><span class="string">E-mail:qingbo.song@gmail.com</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> cStringIO</span><br><span class="line"></span><br><span class="line">FileHandle = cStringIO.cStringIO(<span class="string">"Let freedom ring"</span>) <span class="comment">#创建的文件存在内存中</span></span><br><span class="line">print(FileHandle.read()) <span class="comment"># "Let freedom ring."</span></span><br><span class="line">FileHandle.close()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>总结：</p><p><em>文件管理，是众多编程语言的程序员在编写应用程序是经常遇到的问题。幸好，和其它语言相比，Python使其出乎意料地容易。Python的标准库中提供了许多相关的模块帮助程序员解决这方面的问题，而它的面向对象的机制也简化了操作。</em></p></li></ul><p>###　zip()函数</p><ul><li><p>实例代码</p><ul><li><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="comment">#!/usr/local/env python3</span></span><br><span class="line"> <span class="number">2</span> <span class="string">'''</span></span><br><span class="line"><span class="string"> 3 Author:@南非波波</span></span><br><span class="line"><span class="string"> 4 Blog:http://www.cnblogs.com/songqingbo/</span></span><br><span class="line"><span class="string"> 5 E-mail:qingbo.song@gmail.com</span></span><br><span class="line"><span class="string"> 6 '''</span></span><br><span class="line"> <span class="number">7</span> <span class="comment">#zip()函数展示</span></span><br><span class="line"> <span class="number">8</span> x = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"> <span class="number">9</span> y = [<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="number">10</span> xy = zip(x,y)</span><br><span class="line"><span class="number">11</span> print(xy) <span class="comment">#输出xy的值 &lt;zip object at 0x01347A80&gt; </span></span><br><span class="line"><span class="number">12</span> print(type(xy)) <span class="comment">#输出xy的类型 &lt;class 'zip'&gt;</span></span><br><span class="line"><span class="number">13</span> print(dict(xy)) <span class="comment">#输出xy转换成字典类型后的值 &#123;1: 5, 2: 6&#125;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="comment">#!/usr/local/env python2</span></span><br><span class="line"> <span class="number">2</span> 　　&gt;&gt;&gt; x = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"> <span class="number">3</span> 　　&gt;&gt;&gt; y = [<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"> <span class="number">4</span> 　　&gt;&gt;&gt; xy = zip(x,y)</span><br><span class="line"> <span class="number">5</span> 　　&gt;&gt;&gt; type(xy)</span><br><span class="line"> <span class="number">6</span> 　　　　&lt;type <span class="string">'list'</span>&gt;</span><br><span class="line"> <span class="number">7</span> 　　&gt;&gt;&gt; <span class="keyword">print</span> xy</span><br><span class="line"> <span class="number">8</span> 　　　　[(<span class="number">1</span>, <span class="number">5</span>), (<span class="number">2</span>, <span class="number">6</span>)]</span><br><span class="line"> <span class="number">9</span> 　　&gt;&gt;&gt; <span class="keyword">print</span> dict(xy)</span><br><span class="line"><span class="number">10</span> 　　　　&#123;<span class="number">1</span>: <span class="number">5</span>, <span class="number">2</span>: <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="函数操作"><a href="#函数操作" class="headerlink" title="函数操作"></a>函数操作</h3><ul><li><p>参数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">形参：函数中一个变量，在函数执行前无意义，在函数调用时必须指定实际参数。</span><br><span class="line">实参：实际参数用户传递给所调用的函数的一个变量，其值赋值到函数中的形式参数，然后在函数中    作为变量参与函数执行</span><br><span class="line">默认参数：必须放在最后</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(a1,a2,a3 = <span class="number">5</span>)</span>:</span></span><br><span class="line">        print(a1,a2,a3)</span><br><span class="line">    show(<span class="string">"wu"</span>,<span class="string">"ha"</span>)</span><br><span class="line">    <span class="comment">#返回结果：wu ha 5</span></span><br><span class="line">    </span><br><span class="line">指定参数：</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(a1,a2)</span>:</span></span><br><span class="line">        print(a1,a2)</span><br><span class="line">    show(a2=<span class="number">52</span>,a1=<span class="number">8</span>)</span><br><span class="line">    <span class="comment">#返回结果：8 52</span></span><br><span class="line"></span><br><span class="line">动态参数：</span><br><span class="line">    *arg --序列：自动转换成一个元组</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(*arg)</span>:</span></span><br><span class="line">            print(arg,type(arg))</span><br><span class="line">        show(<span class="number">23</span>,<span class="number">45</span>,<span class="number">67</span>)</span><br><span class="line">        <span class="comment">#返回结果：(23, 45, 67) &lt;class 'tuple'&gt;</span></span><br><span class="line">        <span class="comment">#or</span></span><br><span class="line">        l = [<span class="number">23</span>,<span class="number">45</span>,<span class="number">67</span>]</span><br><span class="line">        show(*l)</span><br><span class="line">        <span class="comment">#返回结果：(23, 45, 67) &lt;class 'tuple'&gt;</span></span><br><span class="line"></span><br><span class="line">    **arg --字典：自动转换成一个字典</span><br><span class="line">        <span class="comment">#默认字典处理</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(**arg)</span>:</span></span><br><span class="line">            print(arg,type(arg))</span><br><span class="line">        show(name1=<span class="string">'swht'</span>,name2=<span class="string">'shen'</span>)</span><br><span class="line">        <span class="comment">#返回结果：&#123;'name1': 'swht', 'name2': 'shen'&#125; &lt;class 'dict'&gt;</span></span><br><span class="line">        <span class="comment">#or</span></span><br><span class="line">        d = &#123;<span class="string">"name1"</span>=<span class="string">"swht"</span>,<span class="string">"name2"</span>=<span class="string">"shen"</span>&#125;</span><br><span class="line">        show(**d)</span><br><span class="line">        <span class="comment">#返回结果：&#123;'name1': 'swht', 'name2': 'shen'&#125; &lt;class 'dict'&gt;</span></span><br><span class="line"></span><br><span class="line">    *arg，**kwarges --序列和字典</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">            print(args,type(args),<span class="string">'\n'</span>,kwargs,type(kwargs))</span><br><span class="line">        show(<span class="number">23</span>,<span class="number">45</span>,<span class="number">67</span>,<span class="number">82</span>,name1=<span class="string">'swht'</span>,name2=<span class="string">'shen'</span>)</span><br><span class="line">        <span class="comment">#返回结果：(23, 45, 67, 82) &lt;class 'tuple'&gt; </span></span><br><span class="line">                  &#123;<span class="string">'name2'</span>: <span class="string">'shen'</span>, <span class="string">'name1'</span>: <span class="string">'swht'</span>&#125; &lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;     </span></span><br><span class="line"><span class="class">        注意：使用*<span class="title">arg</span>，**<span class="title">kwarges</span>组合参数，必须是*<span class="title">arg</span>在前，**<span class="title">kwarges</span>在后，否则系统报错；另外实参在输入的时候也应该是按照上述顺序。</span></span><br></pre></td></tr></table></figure></li><li><p>非固定参数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stu_register</span><span class="params">(name,age,*args)</span>:</span> <span class="comment"># *args 会把多传入的参数变成一个元组形式</span></span><br><span class="line">    print(name,age,args)</span><br><span class="line"> </span><br><span class="line">stu_register(<span class="string">"Alex"</span>,<span class="number">22</span>)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment">#Alex 22 () #后面这个()就是args,只是因为没传值,所以为空</span></span><br><span class="line"> </span><br><span class="line">stu_register(<span class="string">"Jack"</span>,<span class="number">32</span>,<span class="string">"CN"</span>,<span class="string">"Python"</span>)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment"># Jack 32 ('CN', 'Python')</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stu_register</span><span class="params">(name,age,*args,**kwargs)</span>:</span> <span class="comment"># *kwargs 会把多传入的参数变成一个dict形式</span></span><br><span class="line">    print(name,age,args,kwargs)</span><br><span class="line"> </span><br><span class="line">stu_register(<span class="string">"Alex"</span>,<span class="number">22</span>)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment">#Alex 22 () &#123;&#125;#后面这个&#123;&#125;就是kwargs,只是因为没传值,所以为空</span></span><br><span class="line"> </span><br><span class="line">stu_register(<span class="string">"Jack"</span>,<span class="number">32</span>,<span class="string">"CN"</span>,<span class="string">"Python"</span>,sex=<span class="string">"Male"</span>,province=<span class="string">"ShanDong"</span>)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment"># Jack 32 ('CN', 'Python') &#123;'province': 'ShanDong', 'sex': 'Male'&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>局部变量</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Alex Li"</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"before change:"</span>,name)</span><br><span class="line">    name = <span class="string">"金角大王,一个有Tesla的男人"</span></span><br><span class="line">    print(<span class="string">"after change"</span>, name)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">change_name(name)</span><br><span class="line"> </span><br><span class="line">print(<span class="string">"在外面看看name改了么?"</span>,name)</span><br></pre></td></tr></table></figure></li><li><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before change: Alex Li</span><br><span class="line">after change 金角大王,一个有Tesla的男人</span><br><span class="line">在外面看看name改了么? Alex Li</span><br></pre></td></tr></table></figure></li><li><p>lambda表达式</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">功能：简单函数的表示方式</span><br><span class="line">    func = <span class="keyword">lambda</span> a:a+<span class="number">1</span></span><br><span class="line">    函数名  关键字 形参：函数体</span><br><span class="line">    创建形式参数a，函数内容为a+<span class="number">1</span>,并将结果<span class="keyword">return</span></span><br><span class="line">测试代码：</span><br><span class="line">    f = <span class="keyword">lambda</span> x:x + <span class="number">1</span></span><br><span class="line">    ret = f(<span class="number">4</span>)</span><br><span class="line">    print(ret)</span><br></pre></td></tr></table></figure></li><li><p>匿名函数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这段代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n**n</span><br><span class="line">print(calc(<span class="number">10</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#换成匿名函数</span></span><br><span class="line">calc = <span class="keyword">lambda</span> n:n**n</span><br><span class="line">print(calc(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = map(<span class="keyword">lambda</span> x:x**<span class="number">2</span>,[<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">8</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></li><li><p>内置函数</p><ul><li><p>abs()</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">功能：取绝对值</span><br><span class="line">    &gt;&gt;&gt; abs(<span class="number">5</span>)</span><br><span class="line">    <span class="number">5</span></span><br><span class="line">    &gt;&gt;&gt; abs(<span class="number">-85</span>)</span><br><span class="line">    <span class="number">85</span></span><br></pre></td></tr></table></figure></li><li><p><strong>compile()、eval()、exec()</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">功能：compile语句是从type类型中将str里面的语句创建成代码对象。</span><br><span class="line">        compile语句的目的是提供一次性的字节码编译，就不用在以后的每次调用中重新进行编译了</span><br><span class="line">    语法：compile( str, file, type )</span><br><span class="line">        eveal_code = compile(<span class="string">'1+2'</span>,<span class="string">''</span>,<span class="string">'eval'</span>)</span><br><span class="line">        &gt;&gt;&gt;eveal_code</span><br><span class="line">        返回结果：&lt;code object &lt;module&gt; at <span class="number">0x01555D40</span>, file <span class="string">""</span>, line <span class="number">1</span>&gt;</span><br><span class="line">        &gt;&gt;&gt;eval(eveal_code)</span><br><span class="line">        返回结果：<span class="number">3</span></span><br><span class="line"></span><br><span class="line">        single_code = compile( <span class="string">'print("apicloud.com")'</span>, <span class="string">''</span>, <span class="string">'single'</span> )</span><br><span class="line">        &gt;&gt;&gt; single_code</span><br><span class="line">        返回结果：&lt;code object &lt;module&gt; at <span class="number">0x01555B10</span>, file <span class="string">""</span>, line <span class="number">1</span>&gt;</span><br><span class="line">        &gt;&gt;&gt; exec(single_code)</span><br><span class="line">        返回结果：apicloud.com</span><br></pre></td></tr></table></figure></li><li><p>super()</p><p> <strong>功能： 用来解决多重继承问题</strong></p></li><li><p>zip()</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">功能：zip函数接受任意多个（包括<span class="number">0</span>个和<span class="number">1</span>个）序列作为参数，返回一个tuple列表</span><br><span class="line">  &gt;&gt;&gt; x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,]</span><br><span class="line">  &gt;&gt;&gt; y = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,]</span><br><span class="line">  &gt;&gt;&gt; z = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,]</span><br><span class="line">  &gt;&gt;&gt; xyz = zip(x,y,z)</span><br><span class="line">  &gt;&gt;&gt; print(xyz)</span><br><span class="line">  &lt;zip object at <span class="number">0x00FBD968</span>&gt;</span><br><span class="line">  &gt;&gt;&gt; print(list(xyz))</span><br><span class="line">  [(<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>), (<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>), (<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>)]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>更多内置函数：<a href="https://www.cnblogs.com/songqingbo/p/5142957.html" target="_blank" rel="noopener">博客园</a></p></li><li><p>collection</p><ul><li><a href="https://www.cnblogs.com/songqingbo/p/5143014.html" target="_blank" rel="noopener">博客园</a></li></ul></li><li><p>列表生成式</p><ul><li><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>闭包</p><blockquote><p><strong>内部函数对外部函数作用域里变量的引用（非全局变量），则称内部函数为闭包</strong></p></blockquote>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    n = <span class="number">10</span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"inner:"</span>, n)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">  </span><br><span class="line">val = outer()</span><br><span class="line">print(val)</span><br><span class="line">val()</span><br></pre></td></tr></table></figure><blockquote><p>闭包的意义：<strong>返回的函数对象，不仅仅是一个函数对象，在该函数外还包裹了一层作用域，这使得，该函数无论在何处调用，优先使用自己外层包裹的作用域</strong></p></blockquote> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 闭包方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(x)</span>:</span></span><br><span class="line">        print(a*b+x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> calc</span><br><span class="line"></span><br><span class="line">val = outer(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(val)</span><br><span class="line">val(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li><li><p>装饰器(又叫语法糖)</p><p><strong>装饰器调用原理</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/env python3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Author:@南非波波</span></span><br><span class="line"><span class="string">Blog:http://www.cnblogs.com/songqingbo/</span></span><br><span class="line"><span class="string">E-mail:qingbo.song@gmail.com</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">"To passed!"</span>)</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"Welcome [%s] to home page!"</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tv</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"Welcome [%s] to TV page!"</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moive</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"Welcome [%s] to Moive page!"</span> % name)</span><br><span class="line"></span><br><span class="line">tv = login(tv)  <span class="comment">#将tv函数的内存地址传递到login()函数中，然后将tv的内存地址返回并赋给变量tv</span></span><br><span class="line">tv(<span class="string">"swht"</span>) <span class="comment">#变量调用相当于函数的调用</span></span><br></pre></td></tr></table></figure><p><strong>装饰器实现</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/env python3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Author:@南非波波</span></span><br><span class="line"><span class="string">Blog:http://www.cnblogs.com/songqingbo/</span></span><br><span class="line"><span class="string">E-mail:qingbo.song@gmail.com</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(func)</span>:</span> <span class="comment">#程序执行时返回inner函数的内存地址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*arg,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"To passed!"</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*arg,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"Welcome [%s] to home page!"</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tv</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"Welcome [%s] to TV page!"</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moive</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"Welcome [%s] to Moive page!"</span> % name)</span><br><span class="line">tv(<span class="string">"swht"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>返回结果：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; To passed!</span><br><span class="line">&gt; Welcome [swht] to TV page!</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>迭代器</p><blockquote><p>迭代器是访问集合元素的一种方式。迭代器只能往前不能往后。迭代器对象从集合的第一个集合开始访问，直到所有的元素被访问完。<br>优点：不需要事先准备整个迭代过程中的所有元素</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/env python3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Author:@南非波波</span></span><br><span class="line"><span class="string">Blog:http://www.cnblogs.com/songqingbo/</span></span><br><span class="line"><span class="string">E-mail:qingbo.song@gmail.com</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">names = iter([<span class="string">'swht'</span>,<span class="string">'shen'</span>,<span class="string">'jack'</span>])</span><br><span class="line">print(names)</span><br><span class="line">print(names.__next__())</span><br><span class="line">print(names.__next__())</span><br><span class="line">print(names.__next__())</span><br></pre></td></tr></table></figure><blockquote><p>返回结果：<br>&lt;list_iterator object at 0x000000000114C7B8&gt;<br>swht<br>shen<br>jack</p></blockquote></li></ul><ul><li><p>生成器</p><blockquote><p>定义：generator，一个函数调用时返回一个迭代器，那这个函数就叫做生成器。</p><p>作用：yield实现函数中断，并保存函数中断时的状态。中断后，程序可以继续执行下面的代码，而且可以随时可以回头再执行之前中断的函数。<br>可以通过yield实现在单线程的情况下实现并发运算的效果</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/env python3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Author:@南非波波</span></span><br><span class="line"><span class="string">Blog:http://www.cnblogs.com/songqingbo/</span></span><br><span class="line"><span class="string">E-mail:qingbo.song@gmail.com</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">money</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"取款100元!"</span>)</span><br><span class="line">        num -= <span class="number">100</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="number">100</span></span><br><span class="line">        print(<span class="string">"你当前还有%s元"</span> % num)</span><br><span class="line"></span><br><span class="line">ATM = money(<span class="number">500</span>)</span><br><span class="line">print(type(ATM))</span><br><span class="line">print(ATM.__next__())</span><br><span class="line">print(ATM.__next__())</span><br><span class="line">print(<span class="string">"吃包子...."</span>)</span><br><span class="line">print(ATM.__next__())</span><br><span class="line">print(ATM.__next__())</span><br></pre></td></tr></table></figure><blockquote><p>返回结果：<br><class 'generator'><br>取款100元!<br>100<br>你当前还有400元<br>取款100元!<br>100<br>吃包子….<br>你当前还有300元<br>取款100元!<br>100<br>你当前还有200元<br>取款100元!<br>100</class></p></blockquote></li></ul><ul><li><p>异步实现</p><p><strong>yield参数可以返回参数和接收参数，使用send方法可以将值传递到生成器中</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/env python3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Author:@南非波波</span></span><br><span class="line"><span class="string">Blog:http://www.cnblogs.com/songqingbo/</span></span><br><span class="line"><span class="string">E-mail:qingbo.song@gmail.com</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"%s 开始准备吃包子!"</span> % name)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        baozi = <span class="keyword">yield</span> <span class="comment">#yield可以返回一个值，也可以接收一个值</span></span><br><span class="line">        print(<span class="string">"第[%s]波包子来了,被[%s]吃了!"</span> % (baozi,name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(name)</span>:</span></span><br><span class="line">    c1 = consumer(<span class="string">'swht'</span>)</span><br><span class="line">    c2 = consumer(<span class="string">'shen'</span>)</span><br><span class="line">    c1.__next__()</span><br><span class="line">    c2.__next__()</span><br><span class="line">    print(<span class="string">"==%s开始准备做包子!=="</span> % name)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">"**%s做了两个包子!**"</span> % name)</span><br><span class="line">        c1.send(i) <span class="comment">#使用send方法将值传递给yield</span></span><br><span class="line">        c2.send(i)</span><br><span class="line"></span><br><span class="line">producer(<span class="string">'alex'</span>)</span><br></pre></td></tr></table></figure><blockquote></blockquote></li></ul><ul><li><p>递归</p><p><strong>演示递归进出过程：【栈的实现： 后进先出】</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li></ul><p>###　常用模块</p><ul><li><p>time模块</p><blockquote><p>　在Python中，通常有这几种方式来表示时间：</p><ul><li>时间戳(timestamp)：通常来说，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量。我们运行“type(time.time())”，返回的是float类型。</li><li>格式化的时间字符串(Format String)</li><li>结构化的时间(struct_time)：struct_time元组共有9个元素共九个元素:(年，月，日，时，分，秒，一年中第几周，一年中第几天，夏令时)</li></ul></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#--------------------------我们先以当前时间为准,让大家快速认识三种形式的时间</span></span><br><span class="line">print(time.time()) <span class="comment"># 时间戳:1487130156.419527</span></span><br><span class="line">print(time.strftime(<span class="string">"%Y-%m-%d %X"</span>)) <span class="comment">#格式化的时间字符串:'2017-02-15 11:40:53'</span></span><br><span class="line"></span><br><span class="line">print(time.localtime()) <span class="comment">#本地时区的struct_time</span></span><br><span class="line">print(time.gmtime())    <span class="comment">#UTC时区的struct_time</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#时间加减</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(datetime.datetime.now()) #返回 2016-08-19 12:47:03.941925</span></span><br><span class="line"><span class="comment">#print(datetime.date.fromtimestamp(time.time()) )  # 时间戳直接转成日期格式 2016-08-19</span></span><br><span class="line"><span class="comment"># print(datetime.datetime.now() )</span></span><br><span class="line"><span class="comment"># print(datetime.datetime.now() + datetime.timedelta(3)) #当前时间+3天</span></span><br><span class="line"><span class="comment"># print(datetime.datetime.now() + datetime.timedelta(-3)) #当前时间-3天</span></span><br><span class="line"><span class="comment"># print(datetime.datetime.now() + datetime.timedelta(hours=3)) #当前时间+3小时</span></span><br><span class="line"><span class="comment"># print(datetime.datetime.now() + datetime.timedelta(minutes=30)) #当前时间+30分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># c_time  = datetime.datetime.now()</span></span><br><span class="line"><span class="comment"># print(c_time.replace(minute=3,hour=2)) #时间替换</span></span><br><span class="line"></span><br><span class="line">datetime模块</span><br></pre></td></tr></table></figure></li><li><p>random</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"> </span><br><span class="line">print(random.random())<span class="comment">#(0,1)----float    大于0且小于1之间的小数</span></span><br><span class="line"> </span><br><span class="line">print(random.randint(<span class="number">1</span>,<span class="number">3</span>))  <span class="comment">#[1,3]    大于等于1且小于等于3之间的整数</span></span><br><span class="line"> </span><br><span class="line">print(random.randrange(<span class="number">1</span>,<span class="number">3</span>)) <span class="comment">#[1,3)    大于等于1且小于3之间的整数</span></span><br><span class="line"> </span><br><span class="line">print(random.choice([<span class="number">1</span>,<span class="string">'23'</span>,[<span class="number">4</span>,<span class="number">5</span>]]))<span class="comment">#1或者23或者[4,5]</span></span><br><span class="line"> </span><br><span class="line">print(random.sample([<span class="number">1</span>,<span class="string">'23'</span>,[<span class="number">4</span>,<span class="number">5</span>]],<span class="number">2</span>))<span class="comment">#列表元素任意2个组合</span></span><br><span class="line"> </span><br><span class="line">print(random.uniform(<span class="number">1</span>,<span class="number">3</span>))<span class="comment">#大于1小于3的小数，如1.927109612082716 </span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">item=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">random.shuffle(item) <span class="comment">#打乱item的顺序,相当于"洗牌"</span></span><br><span class="line">print(item)</span><br></pre></td></tr></table></figure></li><li><p>os模块</p><blockquote><p>os模块是与操作系统交互的一个接口</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在Linux和Mac平台上，该函数会原样返回path，在windows平台上会将路径中所有字符转换为小写，并将所有斜杠转换为饭斜杠。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.normcase(<span class="string">'c:/windows\\system32\\'</span>)   </span><br><span class="line"><span class="string">'c:\\windows\\system32\\'</span>   </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">规范化路径，如..和/</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.normpath(<span class="string">'c://windows\\System32\\../Temp/'</span>)   </span><br><span class="line"><span class="string">'c:\\windows\\Temp'</span>   </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">'/Users/jieli/test1/\\\a1/\\\\aa.py/../..'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(os.path.normpath(a))</span><br><span class="line">/Users/jieli/test1</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">os路径处理</span><br><span class="line"><span class="comment">#方式一：推荐使用</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#具体应用</span></span><br><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line">possible_topdir = os.path.normpath(os.path.join(</span><br><span class="line">    os.path.abspath(__file__),</span><br><span class="line">    os.pardir, <span class="comment">#上一级</span></span><br><span class="line">    os.pardir,</span><br><span class="line">    os.pardir</span><br><span class="line">))</span><br><span class="line">sys.path.insert(<span class="number">0</span>,possible_topdir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二：不推荐使用</span></span><br><span class="line">os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))</span><br></pre></td></tr></table></figure></li><li><p>sys模块</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span> sys.argv           命令行参数List，第一个元素是程序本身路径</span><br><span class="line">&gt; <span class="number">2</span> sys.<span class="keyword">exit</span>(n)        退出程序，正常退出时<span class="keyword">exit</span>(<span class="number">0</span>)</span><br><span class="line">&gt; <span class="number">3</span> sys.version        获取Python解释程序的版本信息</span><br><span class="line">&gt; <span class="number">4</span> sys.maxint         最大的Int值</span><br><span class="line">&gt; <span class="number">5</span> sys.path           返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值</span><br><span class="line">&gt; <span class="number">6</span> sys.platform       返回操作系统平台名称</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#=========知识储备==========</span></span><br><span class="line"><span class="comment">#进度条的效果</span></span><br><span class="line">[<span class="comment">#             ]</span></span><br><span class="line">[<span class="comment">##            ]</span></span><br><span class="line">[<span class="comment">###           ]</span></span><br><span class="line">[<span class="comment">####          ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定宽度</span></span><br><span class="line">print(<span class="string">'[%-15s]'</span> %<span class="string">'#'</span>)</span><br><span class="line">print(<span class="string">'[%-15s]'</span> %<span class="string">'##'</span>)</span><br><span class="line">print(<span class="string">'[%-15s]'</span> %<span class="string">'###'</span>)</span><br><span class="line">print(<span class="string">'[%-15s]'</span> %<span class="string">'####'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印%</span></span><br><span class="line">print(<span class="string">'%s%%'</span> %(<span class="number">100</span>)) <span class="comment">#第二个%号代表取消第一个%的特殊意义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可传参来控制宽度</span></span><br><span class="line">print(<span class="string">'[%%-%ds]'</span> %<span class="number">50</span>) <span class="comment">#[%-50s]</span></span><br><span class="line">print((<span class="string">'[%%-%ds]'</span> %<span class="number">50</span>) %<span class="string">'#'</span>)</span><br><span class="line">print((<span class="string">'[%%-%ds]'</span> %<span class="number">50</span>) %<span class="string">'##'</span>)</span><br><span class="line">print((<span class="string">'[%%-%ds]'</span> %<span class="number">50</span>) %<span class="string">'###'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#=========实现打印进度条函数==========</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">progress</span><span class="params">(percent,width=<span class="number">50</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> percent &gt;= <span class="number">1</span>:</span><br><span class="line">        percent=<span class="number">1</span></span><br><span class="line">    show_str=(<span class="string">'[%%-%ds]'</span> %width) %(int(width*percent)*<span class="string">'#'</span>)</span><br><span class="line">    print(<span class="string">'\r%s %d%%'</span> %(show_str,int(<span class="number">100</span>*percent)),file=sys.stdout,flush=<span class="literal">True</span>,end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#=========应用==========</span></span><br><span class="line">data_size=<span class="number">1025</span></span><br><span class="line">recv_size=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> recv_size &lt; data_size:</span><br><span class="line">    time.sleep(<span class="number">0.1</span>) <span class="comment">#模拟数据的传输延迟</span></span><br><span class="line">    recv_size+=<span class="number">1024</span> <span class="comment">#每次收1024</span></span><br><span class="line"></span><br><span class="line">    percent=recv_size/data_size <span class="comment">#接收的比例</span></span><br><span class="line">    progress(percent,width=<span class="number">70</span>) <span class="comment">#进度条的宽度70</span></span><br><span class="line"></span><br><span class="line">打印进度条</span><br></pre></td></tr></table></figure></li><li><p>shutil模块</p><blockquote><p>　<strong>shutil.copyfileobj(fsrc, fdst[, length])</strong><br>将文件内容拷贝到另一个文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span> <span class="keyword">import</span> shutil</span><br><span class="line">&gt; <span class="number">2</span>  </span><br><span class="line">&gt; <span class="number">3</span> shutil.copyfileobj(open(<span class="string">'old.xml'</span>,<span class="string">'r'</span>), open(<span class="string">'new.xml'</span>, <span class="string">'w'</span>))</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>　<strong>shutil.copyfile(src, dst)</strong><br>拷贝文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span> shutil.copyfile(<span class="string">'f1.log'</span>, <span class="string">'f2.log'</span>) <span class="comment">#目标文件无需存在</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>　<strong>shutil.copymode(src, dst)</strong><br>仅拷贝权限。内容、组、用户均不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span> shutil.copymode(<span class="string">'f1.log'</span>, <span class="string">'f2.log'</span>) <span class="comment">#目标文件必须存在</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>　<strong>shutil.copystat(src, dst)</strong><br>仅拷贝状态的信息，包括：mode bits, atime, mtime, flags</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 1 shutil.copystat(<span class="string">'f1.log'</span>, <span class="string">'f2.log'</span>) <span class="comment">#目标文件必须存在</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>　<strong>shutil.copy2(src, dst)</strong><br>拷贝文件和状态信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 1 import shutil</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 2  </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 3 shutil.copy2(<span class="string">'f1.log'</span>, <span class="string">'f2.log'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>shutil.ignore_patterns(*patterns)</strong><br><strong>shutil.copytree(src, dst, symlinks=False, ignore=None)</strong><br>递归的去拷贝文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 1 import shutil</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 2  </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 3 shutil.copytree(<span class="string">'folder1'</span>, <span class="string">'folder2'</span>, ignore=shutil.ignore_patterns(<span class="string">'*.pyc'</span>, <span class="string">'tmp*'</span>)) <span class="comment">#目标目录不能存在，注意对folder2目录父级目录要有可写权限，ignore的意思是排除 </span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>shutil.rmtree(path[, ignore_errors[, onerror]])</strong><br>递归的去删除文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 1 import shutil</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 2  </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 3 shutil.rmtree(<span class="string">'folder1'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>shutil.move(src, dst)</strong><br>递归的去移动文件，它类似mv命令，其实就是重命名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 1 import shutil</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 2  </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 3 shutil.move(<span class="string">'folder1'</span>, <span class="string">'folder3'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>json&amp;pickle模块(序列化)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"> </span><br><span class="line">dic=&#123;<span class="string">'name'</span>:<span class="string">'alvin'</span>,<span class="string">'age'</span>:<span class="number">23</span>,<span class="string">'sex'</span>:<span class="string">'male'</span>&#125;</span><br><span class="line">print(type(dic))<span class="comment">#&lt;class 'dict'&gt;</span></span><br><span class="line"> </span><br><span class="line">j=json.dumps(dic)</span><br><span class="line">print(type(j))<span class="comment">#&lt;class 'str'&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">f=open(<span class="string">'序列化对象'</span>,<span class="string">'w'</span>)</span><br><span class="line">f.write(j)  <span class="comment">#-------------------等价于json.dump(dic,f)</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#-----------------------------反序列化&lt;br&gt;</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">f=open(<span class="string">'序列化对象'</span>)</span><br><span class="line">data=json.loads(f.read())<span class="comment">#  等价于data=json.load(f)</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#dct="&#123;'1':111&#125;"#json 不认单引号</span></span><br><span class="line"><span class="comment">#dct=str(&#123;"1":111&#125;)#报错,因为生成的数据还是单引号:&#123;'one': 1&#125;</span></span><br><span class="line"></span><br><span class="line">dct=<span class="string">'&#123;"1":"111"&#125;'</span></span><br><span class="line">print(json.loads(dct))</span><br><span class="line"></span><br><span class="line"><span class="comment">#conclusion:</span></span><br><span class="line"><span class="comment">#        无论数据是怎样创建的，只要满足json格式，就可以json.loads出来,不一定非要dumps的数据才能loads</span></span><br><span class="line"></span><br><span class="line"> 注意点</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"> </span><br><span class="line">dic=&#123;<span class="string">'name'</span>:<span class="string">'alvin'</span>,<span class="string">'age'</span>:<span class="number">23</span>,<span class="string">'sex'</span>:<span class="string">'male'</span>&#125;</span><br><span class="line"> </span><br><span class="line">print(type(dic))<span class="comment">#&lt;class 'dict'&gt;</span></span><br><span class="line"> </span><br><span class="line">j=pickle.dumps(dic)</span><br><span class="line">print(type(j))<span class="comment">#&lt;class 'bytes'&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">f=open(<span class="string">'序列化对象_pickle'</span>,<span class="string">'wb'</span>)<span class="comment">#注意是w是写入str,wb是写入bytes,j是'bytes'</span></span><br><span class="line">f.write(j)  <span class="comment">#-------------------等价于pickle.dump(dic,f)</span></span><br><span class="line"> </span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#-------------------------反序列化</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">f=open(<span class="string">'序列化对象_pickle'</span>,<span class="string">'rb'</span>)</span><br><span class="line"> </span><br><span class="line">data=pickle.loads(f.read())<span class="comment">#  等价于data=pickle.load(f)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">print(data[<span class="string">'age'</span>])</span><br></pre></td></tr></table></figure></li><li><p>hashlib模块</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 1、什么叫hash:hash是一种算法（3.x里代替了md5模块和sha模块，主要提供 SHA1, SHA224, SHA256, SHA384, SHA512 ，MD5 算法），该算法接受传入的内容，经过运算得到一串hash值</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 2、hash值的特点是：</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment">#2.1 只要传入的内容一样，得到的hash值必然一样=====&gt;要用明文传输密码文件完整性校验</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment">#2.2 不能由hash值返解成内容=======》把密码做成hash值，不应该在网络传输明文密码</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment">#2.3 只要使用的hash算法不变，无论校验的内容有多大，得到的hash值长度是固定的</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line">m=hashlib.md5()<span class="comment"># m=hashlib.sha256()</span></span><br><span class="line"> </span><br><span class="line">m.update(<span class="string">'hello'</span>.encode(<span class="string">'utf8'</span>))</span><br><span class="line">print(m.hexdigest())  <span class="comment">#5d41402abc4b2a76b9719d911017c592</span></span><br><span class="line"> </span><br><span class="line">m.update(<span class="string">'alvin'</span>.encode(<span class="string">'utf8'</span>))</span><br><span class="line"> </span><br><span class="line">print(m.hexdigest())  <span class="comment">#92a7e713c30abbb0319fa07da2a5c4af</span></span><br><span class="line"> </span><br><span class="line">m2=hashlib.md5()</span><br><span class="line">m2.update(<span class="string">'helloalvin'</span>.encode(<span class="string">'utf8'</span>))</span><br><span class="line">print(m2.hexdigest()) <span class="comment">#92a7e713c30abbb0319fa07da2a5c4af</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">注意：把一段很长的数据update多次，与一次update这段长数据，得到的结果一样</span></span><br><span class="line"><span class="string">但是update多次为校验大文件提供了可能。</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line"><span class="comment"># ######## 256 ########</span></span><br><span class="line"> </span><br><span class="line">hash = hashlib.sha256(<span class="string">'898oaFs09f'</span>.encode(<span class="string">'utf8'</span>))</span><br><span class="line">hash.update(<span class="string">'alvin'</span>.encode(<span class="string">'utf8'</span>))</span><br><span class="line"><span class="keyword">print</span> (hash.hexdigest())<span class="comment">#e79e68f070cdedcfe63eaf1a2e92c83b4cfb1b5c6bc452d214c1b7e77cdfd1c7</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">passwds=[</span><br><span class="line">    <span class="string">'alex3714'</span>,</span><br><span class="line">    <span class="string">'alex1313'</span>,</span><br><span class="line">    <span class="string">'alex94139413'</span>,</span><br><span class="line">    <span class="string">'alex123456'</span>,</span><br><span class="line">    <span class="string">'123456alex'</span>,</span><br><span class="line">    <span class="string">'a123lex'</span>,</span><br><span class="line">    ]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_passwd_dic</span><span class="params">(passwds)</span>:</span></span><br><span class="line">    dic=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> passwd <span class="keyword">in</span> passwds:</span><br><span class="line">        m=hashlib.md5()</span><br><span class="line">        m.update(passwd.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        dic[passwd]=m.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> dic</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">break_code</span><span class="params">(cryptograph,passwd_dic)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> passwd_dic.items():</span><br><span class="line">        <span class="keyword">if</span> v == cryptograph:</span><br><span class="line">            print(<span class="string">'密码是===&gt;\033[46m%s\033[0m'</span> %k)</span><br><span class="line"></span><br><span class="line">cryptograph=<span class="string">'aee949757a2e698417463d47acac93df'</span></span><br><span class="line">break_code(cryptograph,make_passwd_dic(passwds))</span><br><span class="line"></span><br><span class="line">模拟撞库破解密码</span><br></pre></td></tr></table></figure></li><li><p>logging模块</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/env python3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Author:@南非波波</span></span><br><span class="line"><span class="string">Blog:http://www.cnblogs.com/songqingbo/</span></span><br><span class="line"><span class="string">E-mail:qingbo.song@gmail.com</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># logging.warning("user [swht] is start the systerm!")</span></span><br><span class="line"><span class="comment"># logging.critical("server is down!")</span></span><br><span class="line"><span class="comment">#创建日志</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'[Test-Log]'</span>)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个控制台的handler并设置日志级别</span></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line">ch.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个文件的handler并设置日志级别</span></span><br><span class="line">fh = logging.FileHandler(<span class="string">"access.log"</span>)</span><br><span class="line">fh.setLevel(logging.WARNING)</span><br><span class="line"><span class="comment">#创建日期格式</span></span><br><span class="line"></span><br><span class="line">fomatter = logging.Formatter(<span class="string">'%(asctime)s %(name)s %(levelname)s %(message)s'</span>,datefmt=<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#add formatter to ch and fh</span></span><br><span class="line">ch.setFormatter(fomatter)</span><br><span class="line">fh.setFormatter(fomatter)</span><br><span class="line"></span><br><span class="line">logger.addHandler(ch)</span><br><span class="line">logger.addHandler(fh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'application' code</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出格式：</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">2016-02-20 16:53:27 [Test-Log] DEBUG debug message</span></span><br><span class="line"><span class="string">2016-02-20 16:53:27 [Test-Log] INFO info message</span></span><br><span class="line"><span class="string">2016-02-20 16:53:27 [Test-Log] WARNING warn message</span></span><br><span class="line"><span class="string">2016-02-20 16:53:27 [Test-Log] ERROR error message</span></span><br><span class="line"><span class="string">2016-02-20 16:53:27 [Test-Log] CRITICAL critical message</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><p>###　面向对象</p><pre><code>详见博客： [林海峰](http://www.cnblogs.com/linhaifeng/articles/6182264.html#_label3)</code></pre><ul><li><p>面向对象进阶</p><p>详见博客： <a href="http://www.cnblogs.com/linhaifeng/articles/6204014.html" target="_blank" rel="noopener">林海峰</a></p></li></ul><h3 id="socket编程"><a href="#socket编程" class="headerlink" title="socket编程"></a>socket编程</h3>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">'Linhaifeng'</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port=(<span class="string">'127.0.0.1'</span>,<span class="number">9000</span>)  <span class="comment">#电话卡</span></span><br><span class="line">BUFSIZE=<span class="number">1024</span>                <span class="comment">#收发消息的尺寸</span></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) <span class="comment">#买手机</span></span><br><span class="line">s.bind(ip_port) <span class="comment">#手机插卡</span></span><br><span class="line">s.listen(<span class="number">5</span>)     <span class="comment">#手机待机</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn,addr=s.accept()            <span class="comment">#手机接电话</span></span><br><span class="line"><span class="comment"># print(conn)</span></span><br><span class="line"><span class="comment"># print(addr)</span></span><br><span class="line">print(<span class="string">'接到来自%s的电话'</span> %addr[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">msg=conn.recv(BUFSIZE)             <span class="comment">#听消息,听话</span></span><br><span class="line">print(msg,type(msg))</span><br><span class="line"></span><br><span class="line">conn.send(msg.upper())          <span class="comment">#发消息,说话</span></span><br><span class="line"></span><br><span class="line">conn.close()                    <span class="comment">#挂电话</span></span><br><span class="line"></span><br><span class="line">s.close()                       <span class="comment">#手机关机</span></span><br><span class="line"></span><br><span class="line">服务端</span><br></pre></td></tr></table></figure>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">'Linhaifeng'</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port=(<span class="string">'127.0.0.1'</span>,<span class="number">9000</span>)</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.connect_ex(ip_port)           <span class="comment">#拨电话</span></span><br><span class="line"></span><br><span class="line">s.send(<span class="string">'linhaifeng nb'</span>.encode(<span class="string">'utf-8'</span>))         <span class="comment">#发消息,说话(只能发送字节类型)</span></span><br><span class="line"></span><br><span class="line">feedback=s.recv(BUFSIZE)                           <span class="comment">#收消息,听话</span></span><br><span class="line">print(feedback.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">s.close()                                       <span class="comment">#挂电话</span></span><br><span class="line"></span><br><span class="line">客户端</span><br></pre></td></tr></table></figure><p>  详见博客：<a href="http://www.cnblogs.com/linhaifeng/articles/6129246.html" target="_blank" rel="noopener">林海峰</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python笔记&quot;&gt;&lt;a href=&quot;#python笔记&quot; class=&quot;headerlink&quot; title=&quot;python笔记&quot;&gt;&lt;/a&gt;python笔记&lt;/h1&gt;&lt;p&gt;库文件安装：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; python -m pip inst
      
    
    </summary>
    
      <category term="python" scheme="https://xingmel.top/categories/python/"/>
    
    
      <category term="coding" scheme="https://xingmel.top/tags/coding/"/>
    
      <category term="学习笔记" scheme="https://xingmel.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="https://xingmel.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>配置杂记</title>
    <link href="https://xingmel.top/%E9%85%8D%E7%BD%AE%E6%9D%82%E8%AE%B0.html"/>
    <id>https://xingmel.top/配置杂记.html</id>
    <published>2020-02-03T10:07:56.000Z</published>
    <updated>2020-02-03T10:09:54.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置杂记"><a href="#配置杂记" class="headerlink" title="配置杂记"></a>配置杂记</h1><h3 id="npm设置国内淘宝镜像"><a href="#npm设置国内淘宝镜像" class="headerlink" title="npm设置国内淘宝镜像"></a>npm设置国内淘宝镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><h3 id="npm配置使用cnpm"><a href="#npm配置使用cnpm" class="headerlink" title="npm配置使用cnpm"></a>npm配置使用cnpm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">cnpm install express</span><br></pre></td></tr></table></figure><h3 id="MySql设置时区问题"><a href="#MySql设置时区问题" class="headerlink" title="MySql设置时区问题"></a>MySql设置时区问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%time_zone%&apos;;</span><br><span class="line"></span><br><span class="line">set global time_zone=&apos;+8:00&apos;;</span><br></pre></td></tr></table></figure><ul><li><p>每次重启MySql再重新设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set persist time_zone=&apos;+8:00&apos;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;配置杂记&quot;&gt;&lt;a href=&quot;#配置杂记&quot; class=&quot;headerlink&quot; title=&quot;配置杂记&quot;&gt;&lt;/a&gt;配置杂记&lt;/h1&gt;&lt;h3 id=&quot;npm设置国内淘宝镜像&quot;&gt;&lt;a href=&quot;#npm设置国内淘宝镜像&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="杂项" scheme="https://xingmel.top/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="杂项" scheme="https://xingmel.top/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 简记</title>
    <link href="https://xingmel.top/JavaScript-%E7%AE%80%E8%AE%B0.html"/>
    <id>https://xingmel.top/JavaScript-简记.html</id>
    <published>2019-05-31T13:24:18.000Z</published>
    <updated>2020-02-03T12:27:23.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-简记"><a href="#JavaScript-简记" class="headerlink" title="JavaScript 简记"></a>JavaScript 简记</h1><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h5 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = []; <span class="comment">//创建一个空数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]; <span class="comment">//创建一个有3个数值的数组，以逗号隔开</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="string">'a'</span>, <span class="string">'b'</span>];  <span class="comment">//创建一个包含字符串的数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr3.lenght); <span class="comment">//可以通过lenght属性获取字符串的长度</span></span><br><span class="line"></span><br><span class="line">arr.lenght = <span class="number">0</span>; <span class="comment">//可以改变数组中元素的个数</span></span><br></pre></td></tr></table></figure><h5 id="获取数组元素"><a href="#获取数组元素" class="headerlink" title="获取数组元素"></a>获取数组元素</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式：数组名[下标]</span></span><br><span class="line"><span class="comment">//功能：获取对应下标的那个值，如果下标不存在，则返回undefined</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]); <span class="comment">//red</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">2</span>]); <span class="comment">//blue</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h5 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.length<span class="number">-1</span>; i++)&#123;</span><br><span class="line">    <span class="comment">//遍历数组元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h5><p>用于连接两个或多个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = a.concat(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;b.length; i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(b[i]);</span><br><span class="line">&#125; <span class="comment">//1,2,3,4,5</span></span><br></pre></td></tr></table></figure><h5 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h5><p>用于把数组中的所有元素放入一个字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = a.join();</span><br><span class="line"><span class="keyword">let</span> c = a.join(<span class="string">'||'</span>)；</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">//1||2||3</span></span><br></pre></td></tr></table></figure><h5 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h5><p>返回数组的最后一个元素，并删除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.pop()); <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1,2</span></span><br></pre></td></tr></table></figure><h5 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h5><p>在数组的尾部添加一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1,2,3</span></span><br><span class="line">a.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1,2,3,4</span></span><br></pre></td></tr></table></figure><h5 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h5><p>颠倒数组中元素的顺序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">b = a.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//3,2,1</span></span><br></pre></td></tr></table></figure><h5 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h5><p>返回数组中第一个元素，并删除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.shift()); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//2,3</span></span><br></pre></td></tr></table></figure><h5 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h5><p>在数组的头部添加一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a.unshift(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//0,1,2,3</span></span><br></pre></td></tr></table></figure><h5 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h5><p>对数组排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.sort()); <span class="comment">//1,2,3,4,5</span></span><br></pre></td></tr></table></figure><h5 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h5><p>插入、删除或替换数组的元素</p><p>splice 接受三个参数，第一个参数是位置，第二个参数是删除的个数，第三个则是要修改的值(可选参数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line">a.splice(<span class="number">4</span>) <span class="comment">//5,6,7,8</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//1,2,3,4</span></span><br><span class="line">a.splice(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">//2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//1,4</span></span><br><span class="line">a.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="number">12</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//1,12</span></span><br></pre></td></tr></table></figure><h5 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h5><p>返回数组中一部分，或者说是一个子数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> b = a.slice(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//3,4</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h5 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h5><p>返回字符串中的第n个字符，参数为字符串中的下标</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">1</span>)); <span class="comment">//e</span></span><br></pre></td></tr></table></figure><h5 id="concat-1"><a href="#concat-1" class="headerlink" title="concat()"></a>concat()</h5><p>连接字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">' world'</span>));</span><br></pre></td></tr></table></figure><h5 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h5><p>方法可返回某个指定的字符串值在字符串中首次出现的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'w'</span>)); <span class="comment">//6</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'w'</span>, <span class="number">4</span>)); <span class="comment">//6</span></span><br><span class="line"><span class="comment">//可选参数为字符串开始索引的位置</span></span><br></pre></td></tr></table></figure><h5 id="slice-1"><a href="#slice-1" class="headerlink" title="slice()"></a>slice()</h5><p>提取字符串中的子串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">0</span>,<span class="number">5</span>)); <span class="comment">//hello</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">6</span>,<span class="number">-1</span>)); <span class="comment">//worl  -1为最后一个字符</span></span><br></pre></td></tr></table></figure><h5 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h5><p>将字符串分割成字符串组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">''</span>)); <span class="comment">// ["h", "e", "l", "l", "o"]</span></span><br><span class="line"><span class="string">'a|b|c|d|e'</span>.splitd(<span class="string">'|'</span>); <span class="comment">//['a', 'b', 'c', 'd', 'e']</span></span><br><span class="line"><span class="string">'a|b|c|d|e'</span>.splitd(<span class="string">'|'</span>, <span class="number">3</span>); <span class="comment">//['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><h3 id="Dom"><a href="#Dom" class="headerlink" title="Dom"></a>Dom</h3><h5 id="节点的概念"><a href="#节点的概念" class="headerlink" title="节点的概念"></a>节点的概念</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">     &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">      &lt;title&gt;DOM&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">      &lt;h2&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>javascript DOM<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">      &lt;p&gt;对HTML元素进行操作，可添加、改变或移除css样式等&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;Javascript&lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;DOM&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;CSS&lt;/</span>li&gt;</span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>body&gt;</span><br><span class="line">  &lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/03/5cf4d72237ee340431.jpg" alt="985719216-58e43a81f2080_articlex.jpg"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">元素节点：上图中<span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span>、<span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span>、<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>等都是元素节点，即标签。</span><br><span class="line"></span><br><span class="line">文本节点:向用户展示的内容，如<span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>...<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>中的JavaScript、DOM、CSS等文本。</span><br><span class="line"></span><br><span class="line">属性节点:元素属性，如<span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span></span>标签的链接属性href="http://www.baidu.com"。</span><br></pre></td></tr></table></figure><h5 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h5><ul><li><p>通过id获取元素节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  div1 = <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(div1);</span><br></pre></td></tr></table></figure></li><li><p>通过标签名称获取元素节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;divs.length;i++)&#123;</span><br><span class="line">  alert(divs[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要注意的是获得是一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//这样可以具体到某一个元素</span></span><br></pre></td></tr></table></figure></li><li><p>通过类名获取元素节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  elements= <span class="built_in">document</span>.getElementsByClassName(<span class="string">"d"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;elements.length;i++)&#123;</span><br><span class="line">    alert(divs[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里也是一个数组</span></span><br></pre></td></tr></table></figure></li><li><p>通过css选择器获取元素节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> jq = <span class="built_in">document</span>.querySelector(<span class="string">'.div'</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> jq = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"><span class="comment">//匹配所有div元素</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h5><p><a href="https://www.cnblogs.com/jerry666/p/5634290.html" target="_blank" rel="noopener">节点详解</a></p><p><a href="https://segmentfault.com/a/1190000008944599" target="_blank" rel="noopener">深入浅出</a></p><h5 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h5><ul><li><p>增</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">li.innerHTML = <span class="string">'内容'</span>;</span><br><span class="line">父节点.appendchild(li)</span><br></pre></td></tr></table></figure></li></ul><h5 id="返回元素的首个子元素内容"><a href="#返回元素的首个子元素内容" class="headerlink" title="返回元素的首个子元素内容"></a>返回元素的首个子元素内容</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取body元素的首个子元素内容：</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="built_in">document</span>.body.children[<span class="number">0</span>].innerHTML;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以</span></span><br><span class="line"><span class="keyword">let</span> c = body.getElementsByTagName(<span class="string">'td'</span>)[<span class="number">0</span>].innerHTML;</span><br></pre></td></tr></table></figure><h5 id="兼容获取当前style样式"><a href="#兼容获取当前style样式" class="headerlink" title="兼容获取当前style样式"></a>兼容获取当前style样式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, <span class="string">'name'</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line">        <span class="keyword">return</span> getComputedStyle(obj, <span class="literal">null</span>)[name];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.currentStyle[name]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="解决event兼容问题"><a href="#解决event兼容问题" class="headerlink" title="解决event兼容问题"></a>解决event兼容问题</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event = event || <span class="built_in">window</span>.event;</span><br></pre></td></tr></table></figure><h5 id="取消冒泡"><a href="#取消冒泡" class="headerlink" title="取消冒泡"></a>取消冒泡</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.cancelBubble = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h5 id="事件补充"><a href="#事件补充" class="headerlink" title="事件补充"></a>事件补充</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scrollHeight: 获取对象的滚动高度。</span><br><span class="line">scrollLeft: 设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离</span><br><span class="line">scrollTop: 设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离</span><br><span class="line">scrollWidth: 获取对象的滚动宽度</span><br><span class="line">offsetHeight: 获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度</span><br><span class="line">offsetLeft: 获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置</span><br><span class="line">offsetTop: 获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置</span><br><span class="line">event.clientX: 相对文档的水平座标</span><br><span class="line">event.clientY: 相对文档的垂直座标</span><br><span class="line">event.offsetX: 相对容器的水平坐标</span><br><span class="line">event.offsetY: 相对容器的垂直坐标</span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop: 垂直方向滚动的值</span><br><span class="line">event.clientX+<span class="built_in">document</span>.documentElement.scrollTop: 相对文档的水平座标+垂直方向滚动的量</span><br></pre></td></tr></table></figure><h3 id="Bom"><a href="#Bom" class="headerlink" title="Bom"></a>Bom</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-简记&quot;&gt;&lt;a href=&quot;#JavaScript-简记&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 简记&quot;&gt;&lt;/a&gt;JavaScript 简记&lt;/h1&gt;&lt;h3 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; cla
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://xingmel.top/categories/JavaScript/"/>
    
    
      <category term="学习日记" scheme="https://xingmel.top/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
      <category term="coding" scheme="https://xingmel.top/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Git命令基本操作</title>
    <link href="https://xingmel.top/Git%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html"/>
    <id>https://xingmel.top/Git命令基本操作.html</id>
    <published>2019-05-30T02:28:35.000Z</published>
    <updated>2019-05-31T09:26:50.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git命令基本操作"><a href="#Git命令基本操作" class="headerlink" title="Git命令基本操作"></a>Git命令基本操作</h2><h5 id="本地库初始化"><a href="#本地库初始化" class="headerlink" title="本地库初始化"></a>本地库初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir &quot;file name&quot; #  新建本地库</span><br><span class="line">git init # 初始化本地库</span><br></pre></td></tr></table></figure><h5 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 用户名</span><br><span class="line">git config --global user.email 邮箱</span><br><span class="line">## 区分不同开发人员的身份</span><br></pre></td></tr></table></figure><h5 id="本地库提交的状态"><a href="#本地库提交的状态" class="headerlink" title="本地库提交的状态"></a>本地库提交的状态</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h5 id="写入文件并提交至工作区"><a href="#写入文件并提交至工作区" class="headerlink" title="写入文件并提交至工作区"></a>写入文件并提交至工作区</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &quot;file name&quot;  ##　使用vim命令创建文件</span><br><span class="line">git add &quot;file name&quot;  ##　提交至暂存区</span><br><span class="line">git rm --cached &quot;file name&quot; ##　移出暂存区</span><br><span class="line">git commit -m ＂提交信息＂ &quot;file name&quot; ## 提交至工作区</span><br></pre></td></tr></table></figure><h5 id="从仓库拉取文件到本地"><a href="#从仓库拉取文件到本地" class="headerlink" title="从仓库拉取文件到本地"></a>从仓库拉取文件到本地</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &quot;项目连接&quot;</span><br></pre></td></tr></table></figure><h5 id="将文件提交至仓库"><a href="#将文件提交至仓库" class="headerlink" title="将文件提交至仓库"></a>将文件提交至仓库</h5><p>修改完文件后查看一下状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/31/5cf0eb3fa0f7f26559.png" alt="TIM截图20190531164823.png"></p><p>根据提示使用git add将文件提交至暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add “file name”</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/31/5cf0eb3fe988169893.png" alt="TIM截图20190531164900.png"></p><p>此时使用git commit命令将文件提交至工作区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m “提交信息” “file name”</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/31/5cf0eb4059e0121707.png" alt="TIM截图20190531165035.png"></p><p>最后git push提交至仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/31/5cf0eb4042b4883110.png" alt="TIM截图20190531165102.png"></p><h5 id="同样删除文件或文件夹步骤大致相同，只是少了一步git-add"><a href="#同样删除文件或文件夹步骤大致相同，只是少了一步git-add" class="headerlink" title="同样删除文件或文件夹步骤大致相同，只是少了一步git add"></a>同样删除文件或文件夹步骤大致相同，只是少了一步git add</h5><h2 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h2><h5 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log ## 查看日志</span><br><span class="line">git log --pretty=online ## 简洁的日志信息</span><br><span class="line">git reflog ## 查看日志的另一个方法</span><br></pre></td></tr></table></figure><h5 id="前进后退"><a href="#前进后退" class="headerlink" title="前进后退"></a>前进后退</h5><ul><li><p>基于索引值(推荐)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog ##　查看一下日志,复制第一列的索引值</span><br><span class="line">git reset --hard [索引值]</span><br></pre></td></tr></table></figure></li><li><p>使用^</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gti reset --hard HEAD^ ## 表示往回退一步</span><br><span class="line">git reset --hard HEAD^^ ## 同理往回退两步，以此类推</span><br><span class="line">## 该操作只能回退</span><br></pre></td></tr></table></figure></li><li><p>使用~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~3 ## 回退三步</span><br><span class="line">## 该操作只能回退</span><br></pre></td></tr></table></figure></li></ul><h5 id="删除文件并找回"><a href="#删除文件并找回" class="headerlink" title="删除文件并找回"></a>删除文件并找回</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rset --hard[索引值]</span><br></pre></td></tr></table></figure><h5 id="比较文件差异"><a href="#比较文件差异" class="headerlink" title="比较文件差异"></a>比较文件差异</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff[本地库历史版本] &quot;file name&quot;</span><br></pre></td></tr></table></figure><h5 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git命令基本操作&quot;&gt;&lt;a href=&quot;#Git命令基本操作&quot; class=&quot;headerlink&quot; title=&quot;Git命令基本操作&quot;&gt;&lt;/a&gt;Git命令基本操作&lt;/h2&gt;&lt;h5 id=&quot;本地库初始化&quot;&gt;&lt;a href=&quot;#本地库初始化&quot; class=&quot;head
      
    
    </summary>
    
      <category term="github" scheme="https://xingmel.top/categories/github/"/>
    
    
      <category term="新人向" scheme="https://xingmel.top/tags/%E6%96%B0%E4%BA%BA%E5%90%91/"/>
    
      <category term="学习日记" scheme="https://xingmel.top/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Github从零开始构建hexo</title>
    <link href="https://xingmel.top/Github%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BAhexo.html"/>
    <id>https://xingmel.top/Github从零开始构建hexo.html</id>
    <published>2019-05-29T10:11:25.000Z</published>
    <updated>2020-02-03T11:01:47.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    记录一下本人搭建这博客所遇到的情况，算是一篇填坑之作。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h5 id="安装git"><a href="#安装git" class="headerlink" title="安装git:"></a>安装git:</h5><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a></p><h5 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js:"></a>安装node.js:</h5><p><a href="http://nodejs.cn/" target="_blank" rel="noopener">node.js</a></p><p>安装过程就不赘述了，一路默认安装即可</p><h5 id="github上新建一个仓库"><a href="#github上新建一个仓库" class="headerlink" title="github上新建一个仓库:"></a>github上新建一个仓库:</h5><p><img src="https://i.loli.net/2019/05/29/5cee8bf9a8f0227567.png" alt="TIM截图20190529214020.png"></p><h5 id="生成shh密钥"><a href="#生成shh密钥" class="headerlink" title="生成shh密钥:"></a>生成shh密钥:</h5><p>回到桌面，鼠标右击 打开 Git Bash Here</p><pre><code>cd ~/.ssh</code></pre><p>如果提示: No such file or directory 说明你还没有生成过密钥<br>接着输入下面的命令</p><pre><code>ssh-key -t ras -C &quot;github邮箱地址&quot;</code></pre><p>连续回车3次，之后会生成一个id_ras.pub的文件，我们敲下的命令就会复制里面的内容</p><pre><code>clip &lt; ~/.ssh/id_rsa.pub</code></pre><p>之后我们点击头像找到设置  &gt; SSH and GPG keys &gt; New SSH key &gt; 粘贴刚刚复制的密钥<br>通过如下命令测试是否成功</p><pre><code>ssh -T git@github.com</code></pre><p><img src="https://i.loli.net/2019/05/29/5cee933b8969e28590.png" alt="TIM截图20190529221149.png"><br>成功如上图</p><p>至此前期的准备工作已经完成了，相信看到这里的朋友已经完成了全部的操作了。</p><h2 id="部署hexo"><a href="#部署hexo" class="headerlink" title="部署hexo"></a>部署hexo</h2><p>使用如下命令检测环境是否正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>安装hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>这里windows环境下我推荐用cmd 安装，我在这里安装hexo 出现了很多问题，用cmd就啥事了</p><blockquote><p>接下来我们需要创建一个文件夹，注意这个文件夹很重要，之后的大部分操作都需要在这个文件里，包括以后博客的维护，切记切记。</p></blockquote><p>完成后我们进入这个文件夹，鼠标右击 打开 Git Bash Here</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init # 初始化配置</span><br><span class="line">hexo s # 启动本地服务</span><br></pre></td></tr></table></figure><p>在浏览器输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以访问刚刚创建的博客了。</p><h2 id="链接github仓库"><a href="#链接github仓库" class="headerlink" title="链接github仓库"></a>链接github仓库</h2><p>依次输入下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">git config --global user.name "你的github用户名"</span><br><span class="line"></span><br><span class="line">git config --global user.email "你的github邮箱"</span><br></pre></td></tr></table></figure><p>接着输入</p><pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><p>打开你的浏览器输入你的github用户名.github.io </p><p>大功告成！！！</p><h3 id="创建新博客"><a href="#创建新博客" class="headerlink" title="创建新博客"></a>创建新博客</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new "博客标题"</span><br></pre></td></tr></table></figure><h3 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清除、生成、启动</span></span><br><span class="line">hexo clean &amp;&amp; hexo g -s</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除、生成、部署</span></span><br><span class="line">hexo clean &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure><p>关于博客的一些基本配置和主题美化，我将会在下一篇博客中具体讲解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​    记录一下本人搭建这博客所遇到的情况，算是一篇填坑之作。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; cla
      
    
    </summary>
    
      <category term="hexo" scheme="https://xingmel.top/categories/hexo/"/>
    
    
      <category term="新人向" scheme="https://xingmel.top/tags/%E6%96%B0%E4%BA%BA%E5%90%91/"/>
    
      <category term="hexo" scheme="https://xingmel.top/tags/hexo/"/>
    
      <category term="博客" scheme="https://xingmel.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
