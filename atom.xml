<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>L&#39;blog</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xingmel.top/"/>
  <updated>2020-02-03T10:09:54.592Z</updated>
  <id>https://xingmel.top/</id>
  
  <author>
    <name>xians</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>配置杂记</title>
    <link href="https://xingmel.top/%E9%85%8D%E7%BD%AE%E6%9D%82%E8%AE%B0.html"/>
    <id>https://xingmel.top/配置杂记.html</id>
    <published>2020-02-03T10:07:56.000Z</published>
    <updated>2020-02-03T10:09:54.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置杂记"><a href="#配置杂记" class="headerlink" title="配置杂记"></a>配置杂记</h1><h3 id="npm设置国内淘宝镜像"><a href="#npm设置国内淘宝镜像" class="headerlink" title="npm设置国内淘宝镜像"></a>npm设置国内淘宝镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><h3 id="npm配置使用cnpm"><a href="#npm配置使用cnpm" class="headerlink" title="npm配置使用cnpm"></a>npm配置使用cnpm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">cnpm install express</span><br></pre></td></tr></table></figure><h3 id="MySql设置时区问题"><a href="#MySql设置时区问题" class="headerlink" title="MySql设置时区问题"></a>MySql设置时区问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%time_zone%&apos;;</span><br><span class="line"></span><br><span class="line">set global time_zone=&apos;+8:00&apos;;</span><br></pre></td></tr></table></figure><ul><li><p>每次重启MySql再重新设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set persist time_zone=&apos;+8:00&apos;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;配置杂记&quot;&gt;&lt;a href=&quot;#配置杂记&quot; class=&quot;headerlink&quot; title=&quot;配置杂记&quot;&gt;&lt;/a&gt;配置杂记&lt;/h1&gt;&lt;h3 id=&quot;npm设置国内淘宝镜像&quot;&gt;&lt;a href=&quot;#npm设置国内淘宝镜像&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="杂项" scheme="https://xingmel.top/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="杂项" scheme="https://xingmel.top/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 简记</title>
    <link href="https://xingmel.top/JavaScript-%E7%AE%80%E8%AE%B0.html"/>
    <id>https://xingmel.top/JavaScript-简记.html</id>
    <published>2019-05-31T13:24:18.000Z</published>
    <updated>2019-06-05T16:31:50.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-简记"><a href="#JavaScript-简记" class="headerlink" title="JavaScript 简记"></a>JavaScript 简记</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h5 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = []; <span class="comment">//创建一个空数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]; <span class="comment">//创建一个有3个数值的数组，以逗号隔开</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="string">'a'</span>, <span class="string">'b'</span>];  <span class="comment">//创建一个包含字符串的数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr3.lenght); <span class="comment">//可以通过lenght属性获取字符串的长度</span></span><br><span class="line"></span><br><span class="line">arr.lenght = <span class="number">0</span>; <span class="comment">//可以改变数组中元素的个数</span></span><br></pre></td></tr></table></figure><h5 id="获取数组元素"><a href="#获取数组元素" class="headerlink" title="获取数组元素"></a>获取数组元素</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式：数组名[下标]</span></span><br><span class="line"><span class="comment">//功能：获取对应下标的那个值，如果下标不存在，则返回undefined</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]); <span class="comment">//red</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">2</span>]); <span class="comment">//blue</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h5 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.length<span class="number">-1</span>; i++)&#123;</span><br><span class="line">    <span class="comment">//遍历数组元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>用于连接两个或多个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = a.concat(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;b.length; i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(b[i]);</span><br><span class="line">&#125; <span class="comment">//1,2,3,4,5</span></span><br></pre></td></tr></table></figure><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>用于把数组中的所有元素放入一个字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = a.join();</span><br><span class="line"><span class="keyword">let</span> c = a.join(<span class="string">'||'</span>)；</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">//1||2||3</span></span><br></pre></td></tr></table></figure><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>返回数组的最后一个元素，并删除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.pop()); <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1,2</span></span><br></pre></td></tr></table></figure><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p>在数组的尾部添加一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1,2,3</span></span><br><span class="line">a.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1,2,3,4</span></span><br></pre></td></tr></table></figure><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>颠倒数组中元素的顺序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">b = a.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//3,2,1</span></span><br></pre></td></tr></table></figure><h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><p>返回数组中第一个元素，并删除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.shift()); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//2,3</span></span><br></pre></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p>在数组的头部添加一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a.unshift(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//0,1,2,3</span></span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>对数组排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.sort()); <span class="comment">//1,2,3,4,5</span></span><br></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><p>插入、删除或替换数组的元素</p><p>splice 接受三个参数，第一个参数是位置，第二个参数是删除的个数，第三个则是要修改的值(可选参数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line">a.splice(<span class="number">4</span>) <span class="comment">//5,6,7,8</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//1,2,3,4</span></span><br><span class="line">a.splice(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">//2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//1,4</span></span><br><span class="line">a.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="number">12</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//1,12</span></span><br></pre></td></tr></table></figure><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><p>返回数组中一部分，或者说是一个子数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> b = a.slice(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//3,4</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h4 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h4><p>返回字符串中的第n个字符，参数为字符串中的下标</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">1</span>)); <span class="comment">//e</span></span><br></pre></td></tr></table></figure><h4 id="concat-1"><a href="#concat-1" class="headerlink" title="concat()"></a>concat()</h4><p>连接字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">' world'</span>));</span><br></pre></td></tr></table></figure><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p>方法可返回某个指定的字符串值在字符串中首次出现的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'w'</span>)); <span class="comment">//6</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'w'</span>, <span class="number">4</span>)); <span class="comment">//6</span></span><br><span class="line"><span class="comment">//可选参数为字符串开始索引的位置</span></span><br></pre></td></tr></table></figure><h4 id="slice-1"><a href="#slice-1" class="headerlink" title="slice()"></a>slice()</h4><p>提取字符串中的子串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">0</span>,<span class="number">5</span>)); <span class="comment">//hello</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">6</span>,<span class="number">-1</span>)); <span class="comment">//worl  -1为最后一个字符</span></span><br></pre></td></tr></table></figure><h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><p>将字符串分割成字符串组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">''</span>)); <span class="comment">// ["h", "e", "l", "l", "o"]</span></span><br><span class="line"><span class="string">'a|b|c|d|e'</span>.splitd(<span class="string">'|'</span>); <span class="comment">//['a', 'b', 'c', 'd', 'e']</span></span><br><span class="line"><span class="string">'a|b|c|d|e'</span>.splitd(<span class="string">'|'</span>, <span class="number">3</span>); <span class="comment">//['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><h2 id="Dom"><a href="#Dom" class="headerlink" title="Dom"></a>Dom</h2><h5 id="节点的概念"><a href="#节点的概念" class="headerlink" title="节点的概念"></a>节点的概念</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">     &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">      &lt;title&gt;DOM&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">      &lt;h2&gt;&lt;a href="http://www.baidu.com"&gt;javascript DOM&lt;/a&gt;&lt;/h2&gt;</span><br><span class="line">      &lt;p&gt;对HTML元素进行操作，可添加、改变或移除css样式等&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;Javascript&lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;DOM&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;CSS&lt;/</span>li&gt;</span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>body&gt;</span><br><span class="line">  &lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/03/5cf4d72237ee340431.jpg" alt="985719216-58e43a81f2080_articlex.jpg"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">元素节点：上图中&lt;html&gt;、&lt;body&gt;、&lt;p&gt;等都是元素节点，即标签。</span><br><span class="line"></span><br><span class="line">文本节点:向用户展示的内容，如&lt;li&gt;...&lt;/li&gt;中的JavaScript、DOM、CSS等文本。</span><br><span class="line"></span><br><span class="line">属性节点:元素属性，如&lt;a&gt;标签的链接属性href="http://www.baidu.com"。</span><br></pre></td></tr></table></figure><h5 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h5><ul><li><p>通过id获取元素节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  div1 = <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(div1);</span><br></pre></td></tr></table></figure></li><li><p>通过标签名称获取元素节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;divs.length;i++)&#123;</span><br><span class="line">  alert(divs[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要注意的是获得是一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//这样可以具体到某一个元素</span></span><br></pre></td></tr></table></figure></li><li><p>通过类名获取元素节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  elements= <span class="built_in">document</span>.getElementsByClassName(<span class="string">"d"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;elements.length;i++)&#123;</span><br><span class="line">    alert(divs[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里也是一个数组</span></span><br></pre></td></tr></table></figure></li><li><p>通过css选择器获取元素节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> jq = <span class="built_in">document</span>.querySelector(<span class="string">'.div'</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> jq = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"><span class="comment">//匹配所有div元素</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h5><p><a href="https://www.cnblogs.com/jerry666/p/5634290.html" target="_blank" rel="noopener">节点详解</a></p><p><a href="https://segmentfault.com/a/1190000008944599" target="_blank" rel="noopener">深入浅出</a></p><h5 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h5><ul><li><p>增</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">li.innerHTML = <span class="string">'内容'</span>;</span><br><span class="line">父节点.appendchild(li)</span><br></pre></td></tr></table></figure></li></ul><h5 id="返回元素的首个子元素内容"><a href="#返回元素的首个子元素内容" class="headerlink" title="返回元素的首个子元素内容"></a>返回元素的首个子元素内容</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取body元素的首个子元素内容：</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="built_in">document</span>.body.children[<span class="number">0</span>].innerHTML;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以</span></span><br><span class="line"><span class="keyword">let</span> c = body.getElementsByTagName(<span class="string">'td'</span>)[<span class="number">0</span>].innerHTML;</span><br></pre></td></tr></table></figure><h5 id="兼容获取当前style样式"><a href="#兼容获取当前style样式" class="headerlink" title="兼容获取当前style样式"></a>兼容获取当前style样式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, <span class="string">'name'</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line">        <span class="keyword">return</span> getComputedStyle(obj, <span class="literal">null</span>)[name];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.currentStyle[name]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="解决event兼容问题"><a href="#解决event兼容问题" class="headerlink" title="解决event兼容问题"></a>解决event兼容问题</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event = event || <span class="built_in">window</span>.event;</span><br></pre></td></tr></table></figure><h5 id="取消冒泡"><a href="#取消冒泡" class="headerlink" title="取消冒泡"></a>取消冒泡</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.cancelBubble = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h5 id="事件补充"><a href="#事件补充" class="headerlink" title="事件补充"></a>事件补充</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scrollHeight: 获取对象的滚动高度。</span><br><span class="line">scrollLeft: 设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离</span><br><span class="line">scrollTop: 设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离</span><br><span class="line">scrollWidth: 获取对象的滚动宽度</span><br><span class="line">offsetHeight: 获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度</span><br><span class="line">offsetLeft: 获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置</span><br><span class="line">offsetTop: 获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置</span><br><span class="line">event.clientX: 相对文档的水平座标</span><br><span class="line">event.clientY: 相对文档的垂直座标</span><br><span class="line">event.offsetX: 相对容器的水平坐标</span><br><span class="line">event.offsetY: 相对容器的垂直坐标</span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop: 垂直方向滚动的值</span><br><span class="line">event.clientX+<span class="built_in">document</span>.documentElement.scrollTop: 相对文档的水平座标+垂直方向滚动的量</span><br></pre></td></tr></table></figure><h2 id="Bom"><a href="#Bom" class="headerlink" title="Bom"></a>Bom</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-简记&quot;&gt;&lt;a href=&quot;#JavaScript-简记&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 简记&quot;&gt;&lt;/a&gt;JavaScript 简记&lt;/h1&gt;&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; cla
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://xingmel.top/categories/JavaScript/"/>
    
    
      <category term="学习日记" scheme="https://xingmel.top/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
      <category term="coding" scheme="https://xingmel.top/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Git命令基本操作</title>
    <link href="https://xingmel.top/Git%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html"/>
    <id>https://xingmel.top/Git命令基本操作.html</id>
    <published>2019-05-30T02:28:35.000Z</published>
    <updated>2019-05-31T09:26:50.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git命令基本操作"><a href="#Git命令基本操作" class="headerlink" title="Git命令基本操作"></a>Git命令基本操作</h2><h5 id="本地库初始化"><a href="#本地库初始化" class="headerlink" title="本地库初始化"></a>本地库初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir &quot;file name&quot; #  新建本地库</span><br><span class="line">git init # 初始化本地库</span><br></pre></td></tr></table></figure><h5 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 用户名</span><br><span class="line">git config --global user.email 邮箱</span><br><span class="line">## 区分不同开发人员的身份</span><br></pre></td></tr></table></figure><h5 id="本地库提交的状态"><a href="#本地库提交的状态" class="headerlink" title="本地库提交的状态"></a>本地库提交的状态</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h5 id="写入文件并提交至工作区"><a href="#写入文件并提交至工作区" class="headerlink" title="写入文件并提交至工作区"></a>写入文件并提交至工作区</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &quot;file name&quot;  ##　使用vim命令创建文件</span><br><span class="line">git add &quot;file name&quot;  ##　提交至暂存区</span><br><span class="line">git rm --cached &quot;file name&quot; ##　移出暂存区</span><br><span class="line">git commit -m ＂提交信息＂ &quot;file name&quot; ## 提交至工作区</span><br></pre></td></tr></table></figure><h5 id="从仓库拉取文件到本地"><a href="#从仓库拉取文件到本地" class="headerlink" title="从仓库拉取文件到本地"></a>从仓库拉取文件到本地</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &quot;项目连接&quot;</span><br></pre></td></tr></table></figure><h5 id="将文件提交至仓库"><a href="#将文件提交至仓库" class="headerlink" title="将文件提交至仓库"></a>将文件提交至仓库</h5><p>修改完文件后查看一下状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/31/5cf0eb3fa0f7f26559.png" alt="TIM截图20190531164823.png"></p><p>根据提示使用git add将文件提交至暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add “file name”</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/31/5cf0eb3fe988169893.png" alt="TIM截图20190531164900.png"></p><p>此时使用git commit命令将文件提交至工作区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m “提交信息” “file name”</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/31/5cf0eb4059e0121707.png" alt="TIM截图20190531165035.png"></p><p>最后git push提交至仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/31/5cf0eb4042b4883110.png" alt="TIM截图20190531165102.png"></p><h5 id="同样删除文件或文件夹步骤大致相同，只是少了一步git-add"><a href="#同样删除文件或文件夹步骤大致相同，只是少了一步git-add" class="headerlink" title="同样删除文件或文件夹步骤大致相同，只是少了一步git add"></a>同样删除文件或文件夹步骤大致相同，只是少了一步git add</h5><h2 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h2><h5 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log ## 查看日志</span><br><span class="line">git log --pretty=online ## 简洁的日志信息</span><br><span class="line">git reflog ## 查看日志的另一个方法</span><br></pre></td></tr></table></figure><h5 id="前进后退"><a href="#前进后退" class="headerlink" title="前进后退"></a>前进后退</h5><ul><li><p>基于索引值(推荐)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog ##　查看一下日志,复制第一列的索引值</span><br><span class="line">git reset --hard [索引值]</span><br></pre></td></tr></table></figure></li><li><p>使用^</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gti reset --hard HEAD^ ## 表示往回退一步</span><br><span class="line">git reset --hard HEAD^^ ## 同理往回退两步，以此类推</span><br><span class="line">## 该操作只能回退</span><br></pre></td></tr></table></figure></li><li><p>使用~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~3 ## 回退三步</span><br><span class="line">## 该操作只能回退</span><br></pre></td></tr></table></figure></li></ul><h5 id="删除文件并找回"><a href="#删除文件并找回" class="headerlink" title="删除文件并找回"></a>删除文件并找回</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rset --hard[索引值]</span><br></pre></td></tr></table></figure><h5 id="比较文件差异"><a href="#比较文件差异" class="headerlink" title="比较文件差异"></a>比较文件差异</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff[本地库历史版本] &quot;file name&quot;</span><br></pre></td></tr></table></figure><h5 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git命令基本操作&quot;&gt;&lt;a href=&quot;#Git命令基本操作&quot; class=&quot;headerlink&quot; title=&quot;Git命令基本操作&quot;&gt;&lt;/a&gt;Git命令基本操作&lt;/h2&gt;&lt;h5 id=&quot;本地库初始化&quot;&gt;&lt;a href=&quot;#本地库初始化&quot; class=&quot;head
      
    
    </summary>
    
      <category term="github" scheme="https://xingmel.top/categories/github/"/>
    
    
      <category term="新人向" scheme="https://xingmel.top/tags/%E6%96%B0%E4%BA%BA%E5%90%91/"/>
    
      <category term="学习日记" scheme="https://xingmel.top/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Github从零开始构建hexo</title>
    <link href="https://xingmel.top/Github%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BAhexo.html"/>
    <id>https://xingmel.top/Github从零开始构建hexo.html</id>
    <published>2019-05-29T10:11:25.000Z</published>
    <updated>2019-05-31T04:53:59.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    记录一下本人搭建这博客所遇到的情况，算是一篇填坑之作。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h5 id="安装git"><a href="#安装git" class="headerlink" title="安装git:"></a>安装git:</h5><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a></p><h5 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js:"></a>安装node.js:</h5><p><a href="http://nodejs.cn/" target="_blank" rel="noopener">node.js</a></p><p>安装过程就不赘述了，一路默认安装即可</p><h5 id="github上新建一个仓库"><a href="#github上新建一个仓库" class="headerlink" title="github上新建一个仓库:"></a>github上新建一个仓库:</h5><p><img src="https://i.loli.net/2019/05/29/5cee8bf9a8f0227567.png" alt="TIM截图20190529214020.png"></p><h5 id="生成shh密钥"><a href="#生成shh密钥" class="headerlink" title="生成shh密钥:"></a>生成shh密钥:</h5><p>回到桌面，鼠标右击 打开 Git Bash Here</p><pre><code>cd ~/.ssh</code></pre><p>如果提示: No such file or directory 说明你还没有生成过密钥<br>接着输入下面的命令</p><pre><code>ssh-key -t ras -C &quot;github邮箱地址&quot;</code></pre><p>连续回车3次，之后会生成一个id_ras.pub的文件，我们敲下的命令就会复制里面的内容</p><pre><code>clip &lt; ~/.ssh/id_rsa.pub</code></pre><p>之后我们点击头像找到设置  &gt; SSH and GPG keys &gt; New SSH key &gt; 粘贴刚刚复制的密钥<br>通过如下命令测试是否成功</p><pre><code>ssh -T git@github.com</code></pre><p><img src="https://i.loli.net/2019/05/29/5cee933b8969e28590.png" alt="TIM截图20190529221149.png"><br>成功如上图</p><p>至此前期的准备工作已经完成了，相信看到这里的朋友已经完成了全部的操作了。</p><h2 id="部署hexo"><a href="#部署hexo" class="headerlink" title="部署hexo"></a>部署hexo</h2><p>使用如下命令检测环境是否正常</p><pre><code>npm -v</code></pre><p>安装hexo</p><pre><code>npm install hexo-cli -g</code></pre><p>这里windows环境下我推荐用cmd 安装，我在这里安装hexo 出现了很多问题，用cmd就啥事了</p><blockquote><p>接下来我们需要创建一个文件夹，注意这个文件夹很重要，之后的大部分操作都需要在这个文件里，包括以后博客的维护，切记切记。</p></blockquote><p>完成后我们进入这个文件夹，鼠标右击 打开 Git Bash Here</p><pre><code>hexo init # 初始化配置hexo s # 启动本地服务</code></pre><p>在浏览器输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以访问刚刚创建的博客了。</p><h2 id="链接github仓库"><a href="#链接github仓库" class="headerlink" title="链接github仓库"></a>链接github仓库</h2><p>依次输入下面的命令</p><pre><code>npm install hexo-deployer-git --savegit config --global user.name github用户名git config --global user.email github邮箱</code></pre><p>接着输入</p><pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><p>打开你的浏览器输入你的github用户名.github.io </p><p>大功告成！！！</p><p>关于博客的一些基本配置和主题美化，我将会在下一篇博客中具体讲解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​    记录一下本人搭建这博客所遇到的情况，算是一篇填坑之作。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; cla
      
    
    </summary>
    
      <category term="hexo" scheme="https://xingmel.top/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://xingmel.top/tags/hexo/"/>
    
      <category term="博客" scheme="https://xingmel.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="新人向" scheme="https://xingmel.top/tags/%E6%96%B0%E4%BA%BA%E5%90%91/"/>
    
  </entry>
  
</feed>
